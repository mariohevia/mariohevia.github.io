<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="https://mariohevia.github.io/feed.xml" rel="self" type="application/atom+xml"/><link href="https://mariohevia.github.io/" rel="alternate" type="text/html" hreflang="en"/><updated>2025-05-06T05:28:52+00:00</updated><id>https://mariohevia.github.io/feed.xml</id><title type="html">Dr. Mario A. Hevia Fajardo</title><subtitle>Mario&apos;s research website. </subtitle><entry><title type="html">Flood Detection in Remote Sensing Images</title><link href="https://mariohevia.github.io/blog/2025/flood-detection/" rel="alternate" type="text/html" title="Flood Detection in Remote Sensing Images"/><published>2025-05-02T00:00:00+00:00</published><updated>2025-05-02T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/flood-detection</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/flood-detection/"><![CDATA[<p>Climate change has increased the number and intensity of natural disasters worldwide, including across Europe. Among them, floods are particularly brutal. I had firsthand experience when my hometown flooded overnight, destroying houses and cars. Seeing it up close made the problem feel a lot less abstract.</p> <p>The good news is that technology has come a long way, and researchers are now working hard to build better tools for flood detection, which could help warn people and coordinate humanitarian aid during future flood events. Recently, I have been reading a few papers to understand how these systems work. But reading is not enough, so I decided to implement the ideas from these papers.</p> <p>In this post, I will use the <a href="https://arxiv.org/abs/2407.05007">BlessemFlood21</a> dataset for flood detection (semantic segmentation). The authors of the paper do not provide any code, so I will implement everything from scratch. Some of the decisions I make may differ from those made by the authors. All the code for this blog post can be found <a href="https://github.com/mariohevia/flood_detection_aug">here</a>.</p> <h3 id="setting-up-the-environment">Setting Up the Environment</h3> <p>The first thing we need to do is install the libraries we will be using. As always, I recommend creating a new environment first and installing everything inside it. Use the following commands to install the required packages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv venv envFloodDetect
<span class="nb">source </span>envFloodDetect/bin/activate
uv pip <span class="nb">install </span>torch torchvision matplotlib rasterio
</code></pre></div></div> <p>If you are not familiar with <code class="language-plaintext highlighter-rouge">uv</code> or don’t use it, you can install the packages with this instead:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv envFloodDetect
<span class="nb">source </span>envFloodDetect/bin/activate
pip <span class="nb">install </span>torch torchvision matplotlib rasterio
</code></pre></div></div> <p>We also need to download the dataset from <a href="https://fordatis.fraunhofer.de/handle/fordatis/379">https://fordatis.fraunhofer.de/handle/fordatis/379</a>.</p> <h3 id="dataset">Dataset</h3> <p>The imagery in the <a href="https://arxiv.org/abs/2407.05007">BlessemFlood21</a> dataset was acquired during the 2021 Erftstadt-Blessem flooding. It includes a georeferenced RGB image (~3.2 GB), supplemented with a water mask (~21.55 MB). To understand what it looks like, I opened it using QGIS (an open-source geographic information system software). Below, I show the complete image/dataset on the left and the mask overlaid on the image on the right.</p> <div style="display: flex; justify-content: center; gap: 1rem; flex-wrap: wrap;"> <img src="../../../assets/img/blog_images/2025-05-02-flood-detection/complete_dataset.png" alt="Complete dataset" style="max-width: 45%; height: auto;"/> <img src="../../../assets/img/blog_images/2025-05-02-flood-detection/masked_dataset.png" alt="Masked dataset" style="max-width: 45%; height: auto;"/> </div> <p>If you do not have QGIS, you will need to do all of this directly in Python. It’s important to keep in mind that the images are very large, and QGIS handles them efficiently by avoiding loading the entire image into RAM. It does this by opening the image at a lower resolution, using windows (i.e., clipping the image), or both.</p> <p>To replicate the outputs above, we need to do the same in Python (or load the entire image into RAM, which could cause problems). For this, I’ll use the <code class="language-plaintext highlighter-rouge">rasterio</code> library.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">rasterio</span>

<span class="c1"># Paths to the rgb and mask images
</span><span class="n">rgb_file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_rgb.tif</span><span class="sh">'</span>
<span class="n">mask_file_path</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_mask.tif</span><span class="sh">'</span>

<span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">rgb_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">,</span> \
    <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">mask_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src_mask</span><span class="p">:</span>
    <span class="c1"># Check that the image and the mask are both the same size
</span>    <span class="k">assert</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">width</span> <span class="o">==</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="ow">and</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span>

    <span class="c1"># Define the shape of the output to be read. It will use a lower resolution.
</span>    <span class="n">out_height</span> <span class="o">=</span> <span class="mi">512</span>
    <span class="n">out_width</span> <span class="o">=</span> <span class="n">out_height</span> <span class="o">*</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="o">//</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span> <span class="c1"># Maintains the aspect ratio
</span>    <span class="n">out_shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">out_height</span><span class="p">,</span> <span class="n">out_width</span><span class="p">)</span>
    <span class="n">scaled_img</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">out_shape</span><span class="o">=</span><span class="n">out_shape</span><span class="p">)</span> <span class="c1"># Reads the image in low resolution
</span>    <span class="n">mask_out_shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">out_height</span><span class="p">,</span> <span class="n">out_width</span><span class="p">)</span>
    <span class="n">scaled_mask</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">out_shape</span><span class="o">=</span><span class="n">mask_out_shape</span><span class="p">)</span> <span class="c1"># Reads the mask in low resolution
</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Original image shape: (</span><span class="si">{</span><span class="n">src</span><span class="p">.</span><span class="n">width</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">src</span><span class="p">.</span><span class="n">height</span><span class="si">}</span><span class="s">)</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Scaled image shape: </span><span class="si">{</span><span class="n">scaled_img</span><span class="p">.</span><span class="n">shape</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Transpose to HWC for matplotlib
</span>    <span class="n">scaled_img_plt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
    <span class="n">scaled_mask_plt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">scaled_mask</span><span class="p">,</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div></div> <p>After plotting the loaded image we obtain the following.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-05-02-flood-detection/initial_load.png" alt="Python image load" style="max-width: 100%; height: auto;"/></p> <p>The first thing to notice is that the QGIS image and the Python-rendered image still do not look the same, the Python one appears brighter. This is because the image comes in <code class="language-plaintext highlighter-rouge">uint16</code> format instead of the standard <code class="language-plaintext highlighter-rouge">uint8</code> used by <code class="language-plaintext highlighter-rouge">matplotlib</code>. As a result, <code class="language-plaintext highlighter-rouge">matplotlib</code> clips any pixel values above <code class="language-plaintext highlighter-rouge">255</code> to <code class="language-plaintext highlighter-rouge">255</code>, making the image look overly bright.</p> <p>You might think that scaling from <code class="language-plaintext highlighter-rouge">0–65,535</code> to <code class="language-plaintext highlighter-rouge">0–255</code> (or <code class="language-plaintext highlighter-rouge">0–1</code>, since we plan to use it for deep learning) would solve the problem, and in theory, it would. But for this dataset, doing that results in an almost pitch-black image.</p> <p>This happens because the actual pixel values in the <code class="language-plaintext highlighter-rouge">uint16</code> image do not span the full range up to <code class="language-plaintext highlighter-rouge">65,535</code>. This is common in remote sensing and low-light imaging, where the dynamic range is often compressed. Following what the authors of the dataset did in their publication (and what QGIS does automatically), we normalise the pixel values using the 2nd and 98th percentiles.</p> <p>To compute the percentiles, we have three options: load the entire image at once, load the image in small parts (tiles), or use the lower-resolution version to compute them. I believe that using the lower-resolution version is sufficient most of the time, but to confirm this for this dataset, I also loaded the full-resolution image and compared the results.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">rgb_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">:</span>
    <span class="c1">### WARNING: This uses a lot of RAM ###
</span>    <span class="c1"># Read all the image bands (band 1=R, 2=G, 3=B)
</span>    <span class="n">r</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">g</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>

    <span class="c1"># Calculate 2nd and 98th percentiles for each band/channel
</span>    <span class="n">p2_r</span><span class="p">,</span> <span class="n">p98_r</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">r</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">98</span><span class="p">])</span>
    <span class="n">p2_g</span><span class="p">,</span> <span class="n">p98_g</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">g</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">98</span><span class="p">])</span>
    <span class="n">p2_b</span><span class="p">,</span> <span class="n">p98_b</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">b</span><span class="p">,</span> <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">98</span><span class="p">])</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Red 2nd and 98th percentiles: </span><span class="si">{</span><span class="n">p2_r</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">p98_r</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Green 2nd and 98th percentiles: </span><span class="si">{</span><span class="n">p2_g</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">p98_g</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Blue 2nd and 98th percentiles: </span><span class="si">{</span><span class="n">p2_b</span><span class="si">}</span><span class="s">, </span><span class="si">{</span><span class="n">p98_b</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="c1"># Using the scaled image with lower resolution
</span>    <span class="n">percentiles_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="n">percentiles_98</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">))</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">2nd percentiles: </span><span class="si">{</span><span class="n">percentiles_2</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">98th percentiles: </span><span class="si">{</span><span class="n">percentiles_98</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>This prints the following results.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Red 2nd and 98th percentiles: 0.0, 516.0
Green 2nd and 98th percentiles: 0.0, 465.0
Blue 2nd and 98th percentiles: 0.0, 293.0
2nd percentiles: [0. 0. 0.]
98th percentiles: [515. 465. 294.]
</code></pre></div></div> <p>By using these percentiles to normalise the image, we finally obtain a good image that looks similar to the one from QGIS.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-05-02-flood-detection/final_load.png" alt="Python image load" style="max-width: 60%; height: auto;"/></p> <p>The last thing we need to be able to do is load matching tiles from both the dataset image and the mask, so that we can use them for training and testing. Here, I load a random tile, but later on we will load them based on a grid to avoid repeating images or using parts of the training images in testing.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">rasterio.windows</span> <span class="kn">import</span> <span class="n">Window</span>
<span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">rgb_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">,</span> \
    <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">mask_file_path</span><span class="p">)</span> <span class="k">as</span> <span class="n">src_mask</span><span class="p">:</span>

    <span class="c1"># Obtaining percentiles with low resolution image
</span>    <span class="n">out_height</span> <span class="o">=</span> <span class="mi">512</span>
    <span class="n">out_width</span> <span class="o">=</span> <span class="n">out_height</span> <span class="o">*</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="o">//</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span>  <span class="c1"># Maintains the aspect ratio
</span>    <span class="n">out_shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">out_height</span><span class="p">,</span> <span class="n">out_width</span><span class="p">)</span>
    <span class="n">scaled_img</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">out_shape</span><span class="o">=</span><span class="n">out_shape</span><span class="p">)</span>  <span class="c1"># Reads the image in low resolution
</span>    <span class="n">percentiles_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># Shape: (3, 1, 1)
</span>    <span class="n">percentiles_98</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>  <span class="c1"># Shape: (3, 1, 1)
</span>
    <span class="c1"># Loading a random tile of size 512x512
</span>    <span class="n">tile_size</span> <span class="o">=</span> <span class="mi">512</span>
    <span class="n">x_start</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="o">-</span> <span class="n">tile_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">y_start</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">randint</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span> <span class="o">-</span> <span class="n">tile_size</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">window</span> <span class="o">=</span> <span class="nc">Window</span><span class="p">(</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span><span class="p">,</span> <span class="n">tile_size</span><span class="p">,</span> <span class="n">tile_size</span><span class="p">)</span>

    <span class="c1"># Read the RGB tile - will be in (C,H,W) format
</span>    <span class="n">image</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>  <span class="c1"># Shape: (3, 512, 512)
</span>
    <span class="c1"># Normalise and clip (applying to each channel)
</span>    <span class="n">final_img</span> <span class="o">=</span> <span class="p">(</span><span class="n">image</span> <span class="o">-</span> <span class="n">percentiles_2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">percentiles_98</span> <span class="o">-</span> <span class="n">percentiles_2</span><span class="p">)</span>
    <span class="n">final_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">final_img</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

    <span class="c1"># Read the mask tile - will be in (C,H,W) format
</span>    <span class="n">mask_image</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>
    <span class="n">sample</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">:</span> <span class="n">final_img</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">:</span> <span class="n">mask_image</span><span class="p">}</span>
</code></pre></div></div> <p>Displaying the results we get these matching tiles.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-05-02-flood-detection/tiles.png" alt="Python image load" style="max-width: 100%; height: auto;"/></p> <h3 id="deep-learning-model">Deep Learning Model</h3> <p>Following <a href="https://arxiv.org/abs/2407.05007">Polushko et al. (2024)</a> and <a href="https://arxiv.org/abs/2504.20203">Polushko et al. (2025)</a> I will use the DeepLabV3+ (<a href="https://link.springer.com/chapter/10.1007/978-3-030-01234-2_49">Chen et al. (2018)</a>) model with <code class="language-plaintext highlighter-rouge">SE-ResNet50</code> encoder with 26M parameters, pretrained with <code class="language-plaintext highlighter-rouge">ImageNet</code>. To use this model I use the <a href="https://github.com/qubvel-org/segmentation_models.pytorch"><code class="language-plaintext highlighter-rouge">segmentation-models-pytorch</code></a>. To install it you can run the following command.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv pip <span class="nb">install </span>segmentation-models-pytorch
</code></pre></div></div> <p>Then you can import the model I will be using with this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">segmentation_models_pytorch</span> <span class="k">as</span> <span class="n">smp</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">smp</span><span class="p">.</span><span class="nc">DeepLabV3Plus</span><span class="p">(</span>
    <span class="n">encoder_name</span><span class="o">=</span><span class="sh">"</span><span class="s">se_resnet50</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">encoder_weights</span><span class="o">=</span><span class="sh">"</span><span class="s">imagenet</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">classes</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>  <span class="c1"># Binary segmentation
</span>    <span class="n">activation</span><span class="o">=</span><span class="sh">"</span><span class="s">sigmoid</span><span class="sh">"</span>
<span class="p">)</span>
</code></pre></div></div> <p>There are some other things to consider for this model. First, the model expects tensors with the shape <code class="language-plaintext highlighter-rouge">(batch_size, channels, height, width)</code>, and it relies on pixel values being normalised using specific ImageNet statistics: a mean of <code class="language-plaintext highlighter-rouge">[0.485, 0.456, 0.406]</code> and a standard deviation of <code class="language-plaintext highlighter-rouge">[0.229, 0.224, 0.225]</code>. Assuming that <code class="language-plaintext highlighter-rouge">final_img</code> comes from the code in the last section, we can adjust the image with the following:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Normalise and transform to tensor for DL model
</span><span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">preprocessed_img</span> <span class="o">=</span> <span class="p">(</span><span class="n">final_img</span> <span class="o">-</span> <span class="n">mean</span><span class="p">)</span> <span class="o">/</span> <span class="n">std</span>
<span class="n">tensor_img</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">preprocessed_img</span><span class="p">).</span><span class="nf">float</span><span class="p">()</span>
</code></pre></div></div> <p>Next, we can go ahead and create an inference function, although it will not return any useful results yet, since the model has not been trained yet.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">predict</span><span class="p">(</span><span class="n">image</span><span class="p">,</span> <span class="n">device</span><span class="o">=</span><span class="sh">"</span><span class="s">cuda</span><span class="sh">"</span><span class="p">):</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
    <span class="n">model</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
    
    <span class="c1"># Preprocess
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">image</span><span class="p">.</span><span class="nf">unsqueeze</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>  <span class="c1"># Add batch dimension
</span>    <span class="n">x</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="nf">to</span><span class="p">(</span><span class="n">device</span><span class="p">)</span>
    
    <span class="c1"># Inference
</span>    <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
        <span class="n">prediction</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>

    <span class="k">return</span> <span class="n">prediction</span>  <span class="c1"># Values between 0-1 for binary segmentation
</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="nf">predict</span><span class="p">(</span><span class="n">tensor_img</span><span class="p">)</span>
<span class="n">threshold</span> <span class="o">=</span> <span class="mf">0.5</span>
<span class="n">predictions</span> <span class="o">=</span> <span class="p">(</span><span class="n">predictions</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">).</span><span class="nf">float</span><span class="p">()</span>

<span class="c1"># Transform for matplotlib
</span><span class="n">prediction_plt</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">predictions</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nf">cpu</span><span class="p">().</span><span class="nf">numpy</span><span class="p">(),</span> <span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-05-02-flood-detection/untrained_prediction.png" alt="Untrained prediction" style="max-width: 100%; height: auto;"/></p> <h3 id="training-the-model">Training the Model</h3> <p>To train the model, we first need to create a <code class="language-plaintext highlighter-rouge">Dataset</code> class from <code class="language-plaintext highlighter-rouge">torch.utils.data</code> to load the image into small tiles, normalise them, and everything we did in the <a href="#dataset">Dataset</a> section. This is a bit more complicated (and lengthy), so I will describe the code briefly, and you can review it at your own pace below.</p> <p>I created the <code class="language-plaintext highlighter-rouge">TiledDataset</code> class, which takes the two <code class="language-plaintext highlighter-rouge">.tif</code> files and can output several tiles in batches using <code class="language-plaintext highlighter-rouge">DataLoader</code>. When the class is initialised, it first computes the 2nd and 98th percentile values from the image, just as we did before. Then, it creates a list of all the top-left coordinates of each tile, checking whether the mask indicates the presence of water and ensuring that the tile is not completely black. Afterward, it splits the data into training, validation, and testing sets (80% - 10% - 10%), ensuring that each split contains a proportional number of water-containing tiles for diversity across the subsets.</p> <p>When requesting an image from the class, it takes the top-left coordinates of the tile, loads the image, and normalises it first with the percentiles, then based on the ImageNet statistics to make our data compatible with the pre-trained encoder.</p> <div class="code-container"> <input type="checkbox" id="code-toggle-2" class="code-toggle-control"/> <label for="code-toggle-2" class="code-toggle-label">Dataset Code</label> <div class="code-content"> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># dataset.py
</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">torch.utils.data</span> <span class="kn">import</span> <span class="n">Dataset</span><span class="p">,</span> <span class="n">random_split</span>
<span class="kn">import</span> <span class="n">rasterio</span>
<span class="kn">from</span> <span class="n">rasterio.windows</span> <span class="kn">import</span> <span class="n">Window</span>

<span class="k">class</span> <span class="nc">TiledDataset</span><span class="p">(</span><span class="n">Dataset</span><span class="p">):</span>
    <span class="sh">"""</span><span class="s">Dataset that loads tiles from large TIFF files using Rasterio.</span><span class="sh">"""</span>

    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span>
        <span class="n">self</span><span class="p">,</span> 
        <span class="n">rgb_file</span><span class="p">,</span> 
        <span class="n">mask_file</span><span class="p">,</span> 
        <span class="n">tile_size</span><span class="o">=</span><span class="mi">512</span><span class="p">,</span> 
        <span class="n">transform</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> 
        <span class="n">subset</span><span class="o">=</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">,</span> 
        <span class="n">test_ratio</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> 
        <span class="n">val_ratio</span><span class="o">=</span><span class="mf">0.1</span><span class="p">,</span> 
        <span class="n">seed</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">tile_coords</span><span class="o">=</span><span class="bp">None</span>
        <span class="p">):</span>
        <span class="sh">"""</span><span class="s">
        Args:
            rgb_file (string): Path to the large RGB .tif file.
            mask_file (string): Path to the large mask .tif file.
            tile_size (int, optional): Size of the square tiles to extract (e.g., 512).
            transform (callable, optional): Optional transform to be applied on a sample.
            subset (string, optional): What type of dataset is required (</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">val</span><span class="sh">'</span><span class="s">, </span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="s">)
            test_ratio (float, optional): Ratio of the dataset to use for testing (between 0 and 1).
            val_ratio (float, optional): Ratio of the dataset to use for validation (between 0 and 1).
            seed (int, optional): Seed for sampling the train/test subsets.
            tile_coords (numpy, optional): Optional array of tile coordinates.
        </span><span class="sh">"""</span>
        <span class="n">self</span><span class="p">.</span><span class="n">rgb_file</span> <span class="o">=</span> <span class="n">rgb_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">mask_file</span> <span class="o">=</span> <span class="n">mask_file</span>
        <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span> <span class="o">=</span> <span class="n">tile_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">transform</span> <span class="o">=</span> <span class="n">transform</span>

        <span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rgb_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">,</span> \
            <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mask_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src_mask</span><span class="p">:</span>

            <span class="k">assert</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">width</span> <span class="o">==</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="ow">and</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">height</span> <span class="o">==</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span>

            <span class="c1"># Load a lower resolution version to compute the 2nd and 98th percentiles.
</span>            <span class="n">out_height</span> <span class="o">=</span> <span class="mi">512</span>
            <span class="n">out_width</span> <span class="o">=</span> <span class="n">out_height</span> <span class="o">*</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span> <span class="o">//</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span> <span class="c1"># Maintains the aspect ratio
</span>            <span class="n">out_shape</span> <span class="o">=</span> <span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="n">out_height</span><span class="p">,</span> <span class="n">out_width</span><span class="p">)</span>
            <span class="n">scaled_img</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">out_shape</span><span class="o">=</span><span class="n">out_shape</span><span class="p">)</span> <span class="c1"># Reads the image in low resolution
</span>
            <span class="n">self</span><span class="p">.</span><span class="n">percentiles_2</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> 
            <span class="n">self</span><span class="p">.</span><span class="n">percentiles_98</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">percentile</span><span class="p">(</span><span class="n">scaled_img</span><span class="p">,</span> <span class="mi">98</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">)).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> 
            <span class="n">self</span><span class="p">.</span><span class="n">rgb_width</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span>
            <span class="n">self</span><span class="p">.</span><span class="n">rgb_height</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mask_width</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">width</span>
            <span class="n">self</span><span class="p">.</span><span class="n">mask_height</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="n">height</span>

        <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="o">=</span> <span class="n">tile_coords</span>
        <span class="n">self</span><span class="p">.</span><span class="nf">_create_tile_coords</span><span class="p">()</span>
        <span class="n">self</span><span class="p">.</span><span class="n">water_tile_coords</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">][:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">non_water_tile_coords</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">[:,</span> <span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">][:,</span> <span class="p">:</span><span class="mi">2</span><span class="p">]</span>

        <span class="c1"># Create controlled splits
</span>        <span class="k">if</span> <span class="n">seed</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">torch</span><span class="p">.</span><span class="nf">manual_seed</span><span class="p">(</span><span class="n">seed</span><span class="p">)</span>
        <span class="n">ratios</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="o">-</span><span class="n">test_ratio</span><span class="o">-</span><span class="n">val_ratio</span><span class="p">,</span> <span class="n">val_ratio</span><span class="p">,</span> <span class="n">test_ratio</span><span class="p">]</span>
        <span class="n">water_train</span><span class="p">,</span> <span class="n">water_val</span><span class="p">,</span> <span class="n">water_test</span> <span class="o">=</span> <span class="nf">random_split</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">water_tile_coords</span><span class="p">,</span> <span class="n">ratios</span><span class="p">)</span>
        <span class="n">non_water_train</span><span class="p">,</span> <span class="n">non_water_val</span><span class="p">,</span> <span class="n">non_water_test</span> <span class="o">=</span> <span class="nf">random_split</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">non_water_tile_coords</span><span class="p">,</span> <span class="n">ratios</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">seed</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">torch</span><span class="p">.</span><span class="nf">manual_seed</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">initial_seed</span><span class="p">())</span>
        <span class="n">match</span> <span class="n">subset</span><span class="p">:</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="o">=</span> <span class="n">water_train</span> <span class="o">+</span> <span class="n">non_water_train</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="o">=</span> <span class="n">water_test</span> <span class="o">+</span> <span class="n">non_water_test</span>
            <span class="n">case</span> <span class="sh">'</span><span class="s">val</span><span class="sh">'</span><span class="p">:</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="o">=</span> <span class="n">water_val</span> <span class="o">+</span> <span class="n">non_water_val</span>
            <span class="n">case</span> <span class="n">_</span> <span class="p">:</span>
                <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Unknown subset </span><span class="si">{</span><span class="n">subset</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">_create_tile_coords</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
            <span class="n">non_water_tile_coords</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="n">water_tile_coords</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rgb_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">,</span> \
                <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mask_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src_mask</span><span class="p">:</span>
                <span class="k">for</span> <span class="n">x_start</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">src</span><span class="p">.</span><span class="n">height</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">):</span>
                    <span class="k">for</span> <span class="n">y_start</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">src</span><span class="p">.</span><span class="n">width</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">):</span>
                        <span class="c1"># Define the window (tile)
</span>                        <span class="n">window</span> <span class="o">=</span> <span class="nc">Window</span><span class="p">(</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">)</span>
                        <span class="n">image</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>
                        <span class="n">mask</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>
                        <span class="nf">match </span><span class="p">(</span><span class="nf">bool</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="n">image</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)),</span> <span class="nf">bool</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">all</span><span class="p">(</span><span class="n">mask</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))):</span>
                            <span class="nf">case </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">):</span> <span class="c1"># The mask is all black but not the tile
</span>                                <span class="n">non_water_tile_coords</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span><span class="p">))</span>
                            <span class="nf">case </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="bp">False</span><span class="p">):</span> <span class="c1"># Both the tile and the mask are not all black
</span>                                <span class="n">water_tile_coords</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span><span class="p">))</span>
                            <span class="nf">case </span><span class="p">(</span><span class="bp">False</span><span class="p">,</span> <span class="bp">True</span><span class="p">):</span>
                                <span class="k">raise</span> <span class="nc">ValueError</span><span class="p">(</span><span class="sh">"</span><span class="s">The tile is all black but the mask indicates water</span><span class="sh">"</span><span class="p">)</span>
                            <span class="nf">case </span><span class="p">(</span><span class="bp">True</span><span class="p">,</span> <span class="bp">True</span><span class="p">):</span> <span class="c1"># Both the tile and the mask are all black
</span>                                <span class="k">pass</span>
                        <span class="c1"># if len(water_tile_coords)&gt;1 and len(non_water_tile_coords)&gt;1:
</span>                        <span class="c1">#     break
</span>                <span class="n">tile_coords</span> <span class="o">=</span> <span class="p">(</span>
                    <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">non_water_tile_coords</span><span class="p">]</span> <span class="o">+</span> 
                    <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">water_tile_coords</span><span class="p">]</span>
                <span class="p">)</span>
                <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">tile_coords</span><span class="p">,</span> <span class="n">dtype</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">int32</span><span class="p">)</span>
                <span class="n">np</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="sh">'</span><span class="s">../datasets/tile_coords.npy</span><span class="sh">'</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">)</span>

        
    <span class="k">def</span> <span class="nf">normalise_tile</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">tile</span><span class="p">):</span>
        <span class="c1"># Normalise and clip
</span>        <span class="n">tile</span> <span class="o">=</span> <span class="p">(</span><span class="n">tile</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">percentiles_2</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">percentiles_98</span> <span class="o">-</span> <span class="n">self</span><span class="p">.</span><span class="n">percentiles_2</span><span class="p">)</span>
        <span class="n">image</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">clip</span><span class="p">(</span><span class="n">tile</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="c1"># Normalise for ImageNet and turn into tensor
</span>        <span class="n">mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.485</span><span class="p">,</span> <span class="mf">0.456</span><span class="p">,</span> <span class="mf">0.406</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">std</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">([</span><span class="mf">0.229</span><span class="p">,</span> <span class="mf">0.224</span><span class="p">,</span> <span class="mf">0.225</span><span class="p">]).</span><span class="nf">reshape</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
        <span class="n">preprocessed_img</span> <span class="o">=</span> <span class="p">(</span><span class="n">image</span> <span class="o">-</span> <span class="n">mean</span><span class="p">)</span> <span class="o">/</span> <span class="n">std</span>
        <span class="n">tensor_img</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">tensor</span><span class="p">(</span><span class="n">preprocessed_img</span><span class="p">).</span><span class="nf">float</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">image</span><span class="p">,</span> <span class="n">tensor_img</span>

    <span class="k">def</span> <span class="nf">__len__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="nf">len</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">__getitem__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">idx</span><span class="p">):</span>
        <span class="c1"># Get the top-left coordinates of the idx tile
</span>        <span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span> <span class="o">=</span> <span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">tile_coords</span><span class="p">)[</span><span class="n">idx</span><span class="p">]</span>

        <span class="c1"># Define the window (tile) to read
</span>        <span class="n">window</span> <span class="o">=</span> <span class="nc">Window</span><span class="p">(</span><span class="n">x_start</span><span class="p">,</span> <span class="n">y_start</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">tile_size</span><span class="p">)</span>

        <span class="k">with</span> <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rgb_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src</span><span class="p">,</span> \
            <span class="n">rasterio</span><span class="p">.</span><span class="nf">open</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mask_file</span><span class="p">)</span> <span class="k">as</span> <span class="n">src_mask</span><span class="p">:</span>
            <span class="c1"># Read the RGB tile
</span>            <span class="n">rgb_image</span> <span class="o">=</span> <span class="n">src</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>
            <span class="n">image</span><span class="p">,</span> <span class="n">tensor</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">normalise_tile</span><span class="p">(</span><span class="n">rgb_image</span><span class="p">)</span>

            <span class="c1"># Read the mask tile
</span>            <span class="n">mask_image</span> <span class="o">=</span> <span class="n">src_mask</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="n">window</span><span class="o">=</span><span class="n">window</span><span class="p">)</span>
            <span class="n">sample</span> <span class="o">=</span> <span class="p">{</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">:</span><span class="n">image</span><span class="p">,</span> <span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">:</span><span class="n">tensor</span><span class="p">,</span> <span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">:</span><span class="n">mask_image</span><span class="p">}</span>

        <span class="k">if</span> <span class="n">self</span><span class="p">.</span><span class="n">transform</span><span class="p">:</span>
            <span class="n">transformed</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">transform</span><span class="p">(</span><span class="o">**</span><span class="n">sample</span><span class="p">)</span>
            <span class="n">sample</span><span class="p">[</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">image</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">sample</span><span class="p">[</span><span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">]</span>
            <span class="n">sample</span><span class="p">[</span><span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">]</span>

        <span class="k">return</span> <span class="n">sample</span>
</code></pre></div> </div> </div> </div> <p>Once we have the dataset ready, we can train the neural network. Once again, this involves quite a bit of code, but it follows a fairly standard training procedure once the dataset is loaded. I include the code below for completeness, but I will not explain it further.</p> <div class="code-container"> <input type="checkbox" id="code-toggle-1" class="code-toggle-control"/> <label for="code-toggle-1" class="code-toggle-label">Training Code</label> <div class="code-content"> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># train_model.py
</span>
<span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>
<span class="kn">import</span> <span class="n">torch.nn</span> <span class="k">as</span> <span class="n">nn</span>
<span class="kn">import</span> <span class="n">torch.optim</span> <span class="k">as</span> <span class="n">optim</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>
<span class="kn">import</span> <span class="n">segmentation_models_pytorch</span> <span class="k">as</span> <span class="n">smp</span>
<span class="kn">from</span> <span class="n">dataset</span> <span class="kn">import</span> <span class="n">TiledDataset</span>  <span class="c1"># Assuming you saved the dataset code in dataset.py
</span>
<span class="c1"># Paths
</span><span class="n">RGB_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_rgb.tif</span><span class="sh">'</span>
<span class="n">MASK_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_mask.tif</span><span class="sh">'</span>
<span class="n">TILE_COORDS_PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/tile_coords.npy</span><span class="sh">'</span>
<span class="n">SAVE_PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../models/deeplabv3plus_best.pth</span><span class="sh">'</span>

<span class="c1"># Parameters
</span><span class="n">TILE_SIZE</span> <span class="o">=</span> <span class="mi">512</span>
<span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">NUM_EPOCHS</span> <span class="o">=</span> <span class="mi">10</span>
<span class="n">LR</span> <span class="o">=</span> <span class="mf">1e-4</span>
<span class="n">DEVICE</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span><span class="p">)</span>
<span class="n">SEED</span> <span class="o">=</span> <span class="mi">2025</span>
<span class="n">TEST_RATIO</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="k">def</span> <span class="nf">get_dataloaders</span><span class="p">():</span>
    <span class="n">tile_coords</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">TILE_COORDS_PATH</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">TILE_COORDS_PATH</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="n">train_dataset</span> <span class="o">=</span> <span class="nc">TiledDataset</span><span class="p">(</span>
        <span class="n">rgb_file</span><span class="o">=</span><span class="n">RGB_FILE</span><span class="p">,</span>
        <span class="n">mask_file</span><span class="o">=</span><span class="n">MASK_FILE</span><span class="p">,</span>
        <span class="n">tile_size</span><span class="o">=</span><span class="n">TILE_SIZE</span><span class="p">,</span>
        <span class="n">transform</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">subset</span><span class="o">=</span><span class="sh">'</span><span class="s">train</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">test_ratio</span><span class="o">=</span><span class="n">TEST_RATIO</span><span class="p">,</span>
        <span class="n">seed</span><span class="o">=</span><span class="n">SEED</span><span class="p">,</span>
        <span class="n">tile_coords</span><span class="o">=</span><span class="n">tile_coords</span><span class="p">,</span>
    <span class="p">)</span>

    <span class="n">val_dataset</span> <span class="o">=</span> <span class="nc">TiledDataset</span><span class="p">(</span>
        <span class="n">rgb_file</span><span class="o">=</span><span class="n">RGB_FILE</span><span class="p">,</span>
        <span class="n">mask_file</span><span class="o">=</span><span class="n">MASK_FILE</span><span class="p">,</span>
        <span class="n">tile_size</span><span class="o">=</span><span class="n">TILE_SIZE</span><span class="p">,</span>
        <span class="n">transform</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">subset</span><span class="o">=</span><span class="sh">'</span><span class="s">val</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">test_ratio</span><span class="o">=</span><span class="n">TEST_RATIO</span><span class="p">,</span>
        <span class="n">seed</span><span class="o">=</span><span class="n">SEED</span><span class="p">,</span>
        <span class="n">tile_coords</span><span class="o">=</span><span class="n">tile_coords</span>
    <span class="p">)</span>

    <span class="n">test_dataset</span> <span class="o">=</span> <span class="nc">TiledDataset</span><span class="p">(</span>
        <span class="n">rgb_file</span><span class="o">=</span><span class="n">RGB_FILE</span><span class="p">,</span>
        <span class="n">mask_file</span><span class="o">=</span><span class="n">MASK_FILE</span><span class="p">,</span>
        <span class="n">tile_size</span><span class="o">=</span><span class="n">TILE_SIZE</span><span class="p">,</span>
        <span class="n">transform</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">subset</span><span class="o">=</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">test_ratio</span><span class="o">=</span><span class="n">TEST_RATIO</span><span class="p">,</span>
        <span class="n">seed</span><span class="o">=</span><span class="n">SEED</span><span class="p">,</span>
        <span class="n">tile_coords</span><span class="o">=</span><span class="n">tile_coords</span>
    <span class="p">)</span>

    <span class="n">train_loader</span> <span class="o">=</span> <span class="nc">DataLoader</span><span class="p">(</span><span class="n">train_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">val_loader</span> <span class="o">=</span> <span class="nc">DataLoader</span><span class="p">(</span><span class="n">val_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="n">test_loader</span> <span class="o">=</span> <span class="nc">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">test_loader</span>

<span class="k">def</span> <span class="nf">train</span><span class="p">():</span>
    <span class="n">train_loader</span><span class="p">,</span> <span class="n">val_loader</span><span class="p">,</span> <span class="n">test_loader</span> <span class="o">=</span> <span class="nf">get_dataloaders</span><span class="p">()</span>

    <span class="n">model</span> <span class="o">=</span> <span class="n">smp</span><span class="p">.</span><span class="nc">DeepLabV3Plus</span><span class="p">(</span>
        <span class="n">encoder_name</span><span class="o">=</span><span class="sh">"</span><span class="s">se_resnet50</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">encoder_weights</span><span class="o">=</span><span class="sh">"</span><span class="s">imagenet</span><span class="sh">"</span><span class="p">,</span>
        <span class="n">classes</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
        <span class="n">activation</span><span class="o">=</span><span class="bp">None</span>  <span class="c1"># Use with BCEWithLogitsLoss
</span>    <span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>

    <span class="n">criterion</span> <span class="o">=</span> <span class="n">nn</span><span class="p">.</span><span class="nc">BCEWithLogitsLoss</span><span class="p">()</span>
    <span class="n">optimizer</span> <span class="o">=</span> <span class="n">optim</span><span class="p">.</span><span class="nc">Adam</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">parameters</span><span class="p">(),</span> <span class="n">lr</span><span class="o">=</span><span class="n">LR</span><span class="p">)</span>

    <span class="n">best_loss</span> <span class="o">=</span> <span class="nf">float</span><span class="p">(</span><span class="sh">'</span><span class="s">inf</span><span class="sh">'</span><span class="p">)</span>

    <span class="k">for</span> <span class="n">epoch</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">NUM_EPOCHS</span><span class="p">):</span>
        <span class="n">model</span><span class="p">.</span><span class="nf">train</span><span class="p">()</span>
        <span class="n">train_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="n">loop</span> <span class="o">=</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">train_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sa">f</span><span class="sh">"</span><span class="s">Epoch [</span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s">/</span><span class="si">{</span><span class="n">NUM_EPOCHS</span><span class="si">}</span><span class="s">]</span><span class="sh">"</span><span class="p">)</span>

        <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">loop</span><span class="p">:</span>
            <span class="n">inputs</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">].</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
            <span class="n">masks</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">].</span><span class="nf">float</span><span class="p">().</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>  <span class="c1"># Shape: (B, 1, H, W)
</span>            <span class="n">masks</span> <span class="o">=</span> <span class="n">masks</span><span class="p">.</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">masks</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">masks</span>  <span class="c1"># Handle single-channel
</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="nf">zero_grad</span><span class="p">()</span>
            <span class="n">outputs</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">inputs</span><span class="p">).</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Output shape: (B, H, W)
</span>            <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">masks</span><span class="p">)</span>
            <span class="n">loss</span><span class="p">.</span><span class="nf">backward</span><span class="p">()</span>
            <span class="n">optimizer</span><span class="p">.</span><span class="nf">step</span><span class="p">()</span>

            <span class="n">train_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
            <span class="n">loop</span><span class="p">.</span><span class="nf">set_postfix</span><span class="p">(</span><span class="n">loss</span><span class="o">=</span><span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">())</span>

        <span class="n">avg_train_loss</span> <span class="o">=</span> <span class="n">train_loss</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">train_loader</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> - Average Training Loss: </span><span class="si">{</span><span class="n">avg_train_loss</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Evaluate on test set
</span>        <span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>
        <span class="n">test_loss</span> <span class="o">=</span> <span class="mf">0.0</span>
        <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
            <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="n">val_loader</span><span class="p">:</span>
                <span class="n">inputs</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">].</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
                <span class="n">masks</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">].</span><span class="nf">float</span><span class="p">().</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
                <span class="n">masks</span> <span class="o">=</span> <span class="n">masks</span><span class="p">.</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">outputs</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">inputs</span><span class="p">).</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
                <span class="n">loss</span> <span class="o">=</span> <span class="nf">criterion</span><span class="p">(</span><span class="n">outputs</span><span class="p">,</span> <span class="n">masks</span><span class="p">)</span>
                <span class="n">test_loss</span> <span class="o">+=</span> <span class="n">loss</span><span class="p">.</span><span class="nf">item</span><span class="p">()</span>
        <span class="n">avg_test_loss</span> <span class="o">=</span> <span class="n">test_loss</span> <span class="o">/</span> <span class="nf">len</span><span class="p">(</span><span class="n">val_loader</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> - Average Test Loss: </span><span class="si">{</span><span class="n">avg_test_loss</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

        <span class="c1"># Save best model
</span>        <span class="k">if</span> <span class="n">avg_test_loss</span> <span class="o">&lt;</span> <span class="n">best_loss</span><span class="p">:</span>
            <span class="n">best_loss</span> <span class="o">=</span> <span class="n">avg_test_loss</span>
            <span class="n">torch</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="n">model</span><span class="p">.</span><span class="nf">state_dict</span><span class="p">(),</span> <span class="n">SAVE_PATH</span><span class="p">)</span>
            <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Saved new best model at epoch </span><span class="si">{</span><span class="n">epoch</span><span class="o">+</span><span class="mi">1</span><span class="si">}</span><span class="s"> with loss </span><span class="si">{</span><span class="n">best_loss</span><span class="si">:</span><span class="p">.</span><span class="mi">4</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">'</span><span class="s">__main__</span><span class="sh">'</span><span class="p">:</span>
    <span class="nf">train</span><span class="p">()</span>
</code></pre></div> </div> </div> </div> <h3 id="results">Results</h3> <p>After training, the model showed promising results on the validation set. I still needed to evaluate it on the test set, as the models were selected based on their validation performance. Using IoU, Dice, and accuracy as metrics, the model achieved an average IoU of 89.99%, a Dice score of 94.73%, and an accuracy of 99.56%. These results indicate strong performance in both segmentation quality and pixel-wise classification. Interestingly, the model appears to outperform what is reported in <a href="https://arxiv.org/abs/2407.05007">Polushko et al. (2024)</a> and <a href="https://arxiv.org/abs/2504.20203">Polushko et al. (2025)</a>; however, since these papers do not share their code, it’s difficult to determine what changes may have led to the performance difference.</p> <p>Once again, the code for testing is fairly straightforward, so I will not explain it. But, I will share an image showing the predicted mask (middle) versus the real mask (right).</p> <div class="code-container"> <input type="checkbox" id="code-toggle-3" class="code-toggle-control"/> <label for="code-toggle-3" class="code-toggle-label">Testing Code</label> <div class="code-content"> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">os</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="n">torch</span>
<span class="kn">from</span> <span class="n">torch.utils.data</span> <span class="kn">import</span> <span class="n">DataLoader</span>
<span class="kn">import</span> <span class="n">segmentation_models_pytorch</span> <span class="k">as</span> <span class="n">smp</span>
<span class="kn">from</span> <span class="n">segmentation_models_pytorch.metrics</span> <span class="kn">import</span> <span class="n">get_stats</span><span class="p">,</span> <span class="n">iou_score</span><span class="p">,</span> <span class="n">f1_score</span><span class="p">,</span> <span class="n">accuracy</span>
<span class="kn">from</span> <span class="n">dataset</span> <span class="kn">import</span> <span class="n">TiledDataset</span>
<span class="kn">from</span> <span class="n">tqdm</span> <span class="kn">import</span> <span class="n">tqdm</span>

<span class="c1"># Paths
</span><span class="n">RGB_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_rgb.tif</span><span class="sh">'</span>
<span class="n">MASK_FILE</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/ortho_blessem_20210718_mask.tif</span><span class="sh">'</span>
<span class="n">TILE_COORDS_PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../datasets/tile_coords.npy</span><span class="sh">'</span>
<span class="n">MODEL_PATH</span> <span class="o">=</span> <span class="sh">'</span><span class="s">../models/deeplabv3plus_best.pth</span><span class="sh">'</span>

<span class="c1"># Parameters
</span><span class="n">TILE_SIZE</span> <span class="o">=</span> <span class="mi">512</span>
<span class="n">BATCH_SIZE</span> <span class="o">=</span> <span class="mi">4</span>
<span class="n">DEVICE</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">device</span><span class="p">(</span><span class="sh">'</span><span class="s">cuda</span><span class="sh">'</span> <span class="k">if</span> <span class="n">torch</span><span class="p">.</span><span class="n">cuda</span><span class="p">.</span><span class="nf">is_available</span><span class="p">()</span> <span class="k">else</span> <span class="sh">'</span><span class="s">cpu</span><span class="sh">'</span><span class="p">)</span>
<span class="n">SEED</span> <span class="o">=</span> <span class="mi">2025</span>
<span class="n">TEST_RATIO</span> <span class="o">=</span> <span class="mf">0.1</span>
<span class="n">VAL_RATIO</span> <span class="o">=</span> <span class="mf">0.1</span>

<span class="n">model</span> <span class="o">=</span> <span class="n">smp</span><span class="p">.</span><span class="nc">DeepLabV3Plus</span><span class="p">(</span>
    <span class="n">encoder_name</span><span class="o">=</span><span class="sh">"</span><span class="s">se_resnet50</span><span class="sh">"</span><span class="p">,</span>
    <span class="n">encoder_weights</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
    <span class="n">classes</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span>
    <span class="n">activation</span><span class="o">=</span><span class="bp">None</span>
<span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
<span class="n">model</span><span class="p">.</span><span class="nf">load_state_dict</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">MODEL_PATH</span><span class="p">,</span> <span class="n">map_location</span><span class="o">=</span><span class="n">DEVICE</span><span class="p">))</span>
<span class="n">model</span><span class="p">.</span><span class="nf">eval</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_test_loader</span><span class="p">():</span>
    <span class="n">tile_coords</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="n">TILE_COORDS_PATH</span><span class="p">)</span> <span class="k">if</span> <span class="n">os</span><span class="p">.</span><span class="n">path</span><span class="p">.</span><span class="nf">exists</span><span class="p">(</span><span class="n">TILE_COORDS_PATH</span><span class="p">)</span> <span class="k">else</span> <span class="bp">None</span>

    <span class="n">test_dataset</span> <span class="o">=</span> <span class="nc">TiledDataset</span><span class="p">(</span>
        <span class="n">rgb_file</span><span class="o">=</span><span class="n">RGB_FILE</span><span class="p">,</span>
        <span class="n">mask_file</span><span class="o">=</span><span class="n">MASK_FILE</span><span class="p">,</span>
        <span class="n">tile_size</span><span class="o">=</span><span class="n">TILE_SIZE</span><span class="p">,</span>
        <span class="n">transform</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
        <span class="n">subset</span><span class="o">=</span><span class="sh">'</span><span class="s">test</span><span class="sh">'</span><span class="p">,</span>
        <span class="n">test_ratio</span><span class="o">=</span><span class="n">TEST_RATIO</span><span class="p">,</span>
        <span class="n">val_ratio</span><span class="o">=</span><span class="n">VAL_RATIO</span><span class="p">,</span>
        <span class="n">seed</span><span class="o">=</span><span class="n">SEED</span><span class="p">,</span>
        <span class="n">tile_coords</span><span class="o">=</span><span class="n">tile_coords</span>
    <span class="p">)</span>

    <span class="n">test_loader</span> <span class="o">=</span> <span class="nc">DataLoader</span><span class="p">(</span><span class="n">test_dataset</span><span class="p">,</span> <span class="n">batch_size</span><span class="o">=</span><span class="n">BATCH_SIZE</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">drop_last</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">test_loader</span>

<span class="k">def</span> <span class="nf">test</span><span class="p">():</span>
    <span class="n">test_loader</span> <span class="o">=</span> <span class="nf">get_test_loader</span><span class="p">()</span>

    <span class="n">total_tp</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">total_fp</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">total_fn</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">total_tn</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">with</span> <span class="n">torch</span><span class="p">.</span><span class="nf">no_grad</span><span class="p">():</span>
        <span class="k">for</span> <span class="n">batch</span> <span class="ow">in</span> <span class="nf">tqdm</span><span class="p">(</span><span class="n">test_loader</span><span class="p">,</span> <span class="n">desc</span><span class="o">=</span><span class="sh">"</span><span class="s">Evaluating</span><span class="sh">"</span><span class="p">):</span>
            <span class="n">inputs</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">tensor</span><span class="sh">'</span><span class="p">].</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
            <span class="n">masks</span> <span class="o">=</span> <span class="n">batch</span><span class="p">[</span><span class="sh">'</span><span class="s">mask</span><span class="sh">'</span><span class="p">].</span><span class="nf">to</span><span class="p">(</span><span class="n">torch</span><span class="p">.</span><span class="n">uint8</span><span class="p">).</span><span class="nf">to</span><span class="p">(</span><span class="n">DEVICE</span><span class="p">)</span>
            <span class="n">masks</span> <span class="o">=</span> <span class="n">masks</span><span class="p">.</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="k">if</span> <span class="n">masks</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span> <span class="k">else</span> <span class="n">masks</span>

            <span class="n">outputs</span> <span class="o">=</span> <span class="nf">model</span><span class="p">(</span><span class="n">inputs</span><span class="p">).</span><span class="nf">squeeze</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
            <span class="n">probs</span> <span class="o">=</span> <span class="n">torch</span><span class="p">.</span><span class="nf">sigmoid</span><span class="p">(</span><span class="n">outputs</span><span class="p">)</span>

            <span class="n">tp</span><span class="p">,</span> <span class="n">fp</span><span class="p">,</span> <span class="n">fn</span><span class="p">,</span> <span class="n">tn</span> <span class="o">=</span> <span class="nf">get_stats</span><span class="p">(</span><span class="n">probs</span><span class="p">,</span> <span class="n">masks</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">'</span><span class="s">binary</span><span class="sh">'</span><span class="p">,</span> <span class="n">threshold</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>

            <span class="n">total_tp</span> <span class="o">+=</span> <span class="n">tp</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>
            <span class="n">total_fp</span> <span class="o">+=</span> <span class="n">fp</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>
            <span class="n">total_fn</span> <span class="o">+=</span> <span class="n">fn</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>
            <span class="n">total_tn</span> <span class="o">+=</span> <span class="n">tn</span><span class="p">.</span><span class="nf">sum</span><span class="p">()</span>

    <span class="c1"># Compute metrics
</span>    <span class="n">iou</span> <span class="o">=</span> <span class="nf">iou_score</span><span class="p">(</span><span class="n">total_tp</span><span class="p">,</span> <span class="n">total_fp</span><span class="p">,</span> <span class="n">total_fn</span><span class="p">,</span> <span class="n">total_tn</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="sh">'</span><span class="s">micro</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">dice</span> <span class="o">=</span> <span class="nf">f1_score</span><span class="p">(</span><span class="n">total_tp</span><span class="p">,</span> <span class="n">total_fp</span><span class="p">,</span> <span class="n">total_fn</span><span class="p">,</span> <span class="n">total_tn</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="sh">'</span><span class="s">micro</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">acc</span> <span class="o">=</span> <span class="nf">accuracy</span><span class="p">(</span><span class="n">total_tp</span><span class="p">,</span> <span class="n">total_fp</span><span class="p">,</span> <span class="n">total_fn</span><span class="p">,</span> <span class="n">total_tn</span><span class="p">,</span> <span class="n">reduction</span><span class="o">=</span><span class="sh">'</span><span class="s">micro</span><span class="sh">'</span><span class="p">)</span>

    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Average IoU: </span><span class="si">{</span><span class="mi">100</span> <span class="o">*</span> <span class="n">iou</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Average Dice: </span><span class="si">{</span><span class="mi">100</span> <span class="o">*</span> <span class="n">dice</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Average Accuracy: </span><span class="si">{</span><span class="mi">100</span> <span class="o">*</span> <span class="n">acc</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div> </div> </div> </div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-05-02-flood-detection/trained_prediction.png" alt="Untrained prediction" style="max-width: 100%; height: auto;"/></p> <h3 id="conclusion">Conclusion</h3> <p>In this post, we built a complete pipeline for real-world flood detection using semantic segmentation. From preprocessing the images to creating a tile-based dataset and training a DeepLabV3+ model. I hope this walkthrough helped you better understand how semantic segmentation works; it certainly helped me to write it.</p> <p>One last note: based on the research papers I have read, data augmentation plays a crucial role in training effective semantic segmentation models. In this post, I did not apply any augmentation techniques, but I plan to explore that in a follow-up. I’m particularly interested in testing the effectiveness of augmentations inspired by <a href="https://arxiv.org/abs/2504.20203">Polushko et al. (2025)</a> and <a href="https://ieeexplore.ieee.org/document/9257710">Alharbi et al. (2020)</a>.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="Computer-Vision"/><category term="Deep-Learning"/><category term="PyTorch"/><summary type="html"><![CDATA[In this post, I explore how to implement flood detection models trained on drone imagery. Based on recent research using the BlessemFlood21 dataset, I walk through the process of preparing the dataset and training the neural networks.]]></summary></entry><entry><title type="html">OpenCV Crash Course with Python</title><link href="https://mariohevia.github.io/blog/2025/open-cv-tutorial-example-project/" rel="alternate" type="text/html" title="OpenCV Crash Course with Python"/><published>2025-04-24T00:00:00+00:00</published><updated>2025-04-24T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/open-cv-tutorial-example-project</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/open-cv-tutorial-example-project/"><![CDATA[<p>At the start of my PhD, I did a bit of Python tutoring for undergrads. Over Easter break, while cleaning out my computer, I stumbled across some old Jupyter notebooks I’d put together for those sessions, covering basic Python, object-oriented programming, and some hands-on work with the OpenCV library. I was about to delete them, but figured, why not turn them into something useful?</p> <p>So here we are. This post is a walkthrough of my introductory OpenCV crash course. I’ll show you how to read and display media, apply basic transformations, and a few other simple things. If you want to follow along the blog you can download the code and resources <a href="https://github.com/mariohevia/open_cv_tutorial">here</a>.</p> <h3 id="installing-opencv">Installing OpenCV</h3> <p>The first thing we need to do is install OpenCV and all the libraries we will use in this course. As always, I recommend creating a new environment first and installing everything inside it. Use the following commands to install the packages:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>uv venv envOpenCV
<span class="nb">source </span>envOpenCV/bin/activate
uv pip <span class="nb">install </span>notebook opencv-python matplotlib
</code></pre></div></div> <p>If you are not familiar with <code class="language-plaintext highlighter-rouge">uv</code> or don’t use it, you can install the packages with this instead:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>python <span class="nt">-m</span> venv envOpenCV
<span class="nb">source </span>envOpenCV/bin/activate
pip <span class="nb">install </span>notebook opencv-python matplotlib
</code></pre></div></div> <p>If you plan to dive deeper into the OpenCV library, it might be worth installing <code class="language-plaintext highlighter-rouge">opencv-contrib-python</code> instead, which includes extra features.</p> <h3 id="reading-and-displaying-images">Reading and Displaying Images</h3> <p>Let’s start by loading an image from disk and displaying it. OpenCV comes with a simple <code class="language-plaintext highlighter-rouge">imread()</code> function that takes a path and loads the image as a NumPy array.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">cv2</span> <span class="k">as</span> <span class="n">cv</span>
<span class="kn">import</span> <span class="n">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">from</span> <span class="n">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span>

<span class="n">cat</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cat.jpg</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>Once loaded, you can display the image using OpenCV’s window system:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cv</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Cat</span><span class="sh">'</span><span class="p">,</span> <span class="n">cat</span><span class="p">)</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <p>The <code class="language-plaintext highlighter-rouge">waitKey(0)</code> call keeps the image open until any key is pressed and <code class="language-plaintext highlighter-rouge">cv.destroyAllWindows()</code> closes the windows afterwards.</p> <p>If you prefer (as me) to use <code class="language-plaintext highlighter-rouge">matplotlib</code> to display the image, you first need to transform the image from BGR to RGB, because OpenCV loads them in BGR and <code class="language-plaintext highlighter-rouge">matplotlib</code> expects it in RGB. Here we display both RGB and BGR to show this.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rgb_cat</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">cat</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb_cat</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/cat_rgb_bgr.png" alt="Display matplotlib RGB vs BGR" style="max-width: 75%; height: auto;"/></p> <p>Another thing to keep in mind: when you open large images in OpenCV, they won’t automatically resize to fit your screen. In contrast, Matplotlib does scale the image to fit the figure size when you use <code class="language-plaintext highlighter-rouge">plt.imshow()</code>, but this is just for display purposes. The image itself doesn’t change (you can confirm this by checking the axes, which reflect the original size).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat_large</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cat_large.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">rgb_cat_large</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">cat_large</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span> <span class="c1"># You could also use this function to change it to black and white
</span><span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Small</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb_cat</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">subplot</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">title</span><span class="p">(</span><span class="sh">'</span><span class="s">Large</span><span class="sh">'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="n">rgb_cat_large</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">show</span><span class="p">()</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/cat_small_large.png" alt="Display matplotlib small vs large" style="max-width: 75%; height: auto;"/></p> <h3 id="reading-and-displaying-video">Reading and Displaying Video</h3> <p>To read video, use OpenCV’s <code class="language-plaintext highlighter-rouge">VideoCapture</code> object:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">capture</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Videos/dog.mp4</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># Check if the video opened successfully
</span><span class="k">if</span> <span class="ow">not</span> <span class="n">capture</span><span class="p">.</span><span class="nf">isOpened</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Error: Could not open video.</span><span class="sh">"</span><span class="p">)</span>
<span class="c1"># Read the frames per second
</span><span class="n">fps</span> <span class="o">=</span> <span class="nf">round</span><span class="p">(</span><span class="n">capture</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">cv</span><span class="p">.</span><span class="n">CAP_PROP_FPS</span><span class="p">))</span>
</code></pre></div></div> <p>We loop through the video frame by frame using <code class="language-plaintext highlighter-rouge">.read()</code>. This function returns two values: the frame itself and a boolean that tells us whether the frame was successfully read (e.g., it will return False if we’ve reached the end of the video, the file didn’t load correctly, or the camera got disconnected).</p> <p>To control the playback speed, we use <code class="language-plaintext highlighter-rouge">cv.waitKey()</code>, which waits for a key press for <code class="language-plaintext highlighter-rouge">int(1000/fps)</code> milliseconds — enough to match the video’s original frame rate. It returns the ASCII value of the key pressed, or <code class="language-plaintext highlighter-rouge">-1</code> if no key was pressed during that time. If the key is <code class="language-plaintext highlighter-rouge">'q'</code>, we break the loop and stop the video.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">capture</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span>
        <span class="k">break</span>  <span class="c1"># End of video
</span>    <span class="c1"># Display frame as an image
</span>    <span class="n">cv</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Video Frame</span><span class="sh">'</span><span class="p">,</span> <span class="n">frame</span><span class="p">)</span>
    <span class="c1"># Press 'q' to quit
</span>    <span class="k">if</span> <span class="n">cv</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="nf">int</span><span class="p">(</span><span class="mi">1000</span><span class="o">/</span><span class="n">fps</span><span class="p">))</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="sh">'</span><span class="s">q</span><span class="sh">'</span><span class="p">):</span>
        <span class="k">break</span>

<span class="c1"># Release resources
</span><span class="n">capture</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <p>Similarly, we can pull in video from a webcam:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">capture</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nc">VideoCapture</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">ret</span><span class="p">,</span> <span class="n">frame</span> <span class="o">=</span> <span class="n">capture</span><span class="p">.</span><span class="nf">read</span><span class="p">()</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">ret</span><span class="p">:</span>
        <span class="k">break</span>
    <span class="n">cv</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Webcam</span><span class="sh">'</span><span class="p">,</span> <span class="n">frame</span><span class="p">)</span>

    <span class="k">if</span> <span class="n">cv</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span> <span class="o">&amp;</span> <span class="mh">0xFF</span> <span class="o">==</span> <span class="nf">ord</span><span class="p">(</span><span class="sh">'</span><span class="s">q</span><span class="sh">'</span><span class="p">):</span>
        <span class="k">break</span>

<span class="n">capture</span><span class="p">.</span><span class="nf">release</span><span class="p">()</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <h3 id="rescaling-imagesframes">Rescaling Images/Frames</h3> <p>Sometimes you need to resize your image or video is way too big. Here’s how to rescale it.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rescaleImage</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">scale</span><span class="o">=</span><span class="mf">0.5</span><span class="p">):</span>
    <span class="n">new_dimensions</span> <span class="o">=</span> <span class="p">(</span>
        <span class="nf">int</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="n">scale</span><span class="p">),</span>
        <span class="nf">int</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="n">scale</span><span class="p">)</span>
    <span class="p">)</span>
    <span class="k">return</span> <span class="n">cv</span><span class="p">.</span><span class="nf">resize</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">new_dimensions</span><span class="p">,</span> <span class="n">interpolation</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="n">INTER_AREA</span><span class="p">)</span>
</code></pre></div></div> <p>And use it like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">rescaled_cat</span> <span class="o">=</span> <span class="nf">rescaleImage</span><span class="p">(</span><span class="n">cat</span><span class="p">)</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">imshow</span><span class="p">(</span><span class="sh">'</span><span class="s">Cat</span><span class="sh">'</span><span class="p">,</span> <span class="n">rescaled_cat</span><span class="p">)</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">waitKey</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">destroyAllWindows</span><span class="p">()</span>
</code></pre></div></div> <p>Keep in mind that we can use the same function for videos.</p> <h3 id="drawing-on-images">Drawing on Images</h3> <p>An image is essentially just a 3D array: width, height, and colour channels. As I mentioned before, in OpenCV, colours are ordered as BGR, while matplotlib uses RGB. To create a black image, we can simply use NumPy to generate an array filled with zeroes.</p> <p>In the code we use the 8-bit unsigned integer (uint8) data type, which allows values from 0 to 255 for each colour. Other common data types include ‘uint16’ (with a range from 0 to 65535) and ‘float32’ (with values between 0.0 and 1.0).</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">black_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">((</span><span class="mi">500</span><span class="p">,</span><span class="mi">500</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span> <span class="n">dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">uint8</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p>We can also manipulate the array values to change the colour of the image directly.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">red_img</span> <span class="o">=</span> <span class="n">black_img</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">red_img</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">255</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span> <span class="c1"># Since we are displaying the images with matplotlib the first value corresponds to red
</span><span class="n">green_img</span> <span class="o">=</span> <span class="n">black_img</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">green_img</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="n">blue_img</span> <span class="o">=</span> <span class="n">black_img</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">blue_img</span><span class="p">[:]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/black_red_green_blue.png" alt="Display colour images created with numpy" style="max-width: 75%; height: auto;"/></p> <p>We can also create a rectangle (or any shape) only using numpy.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">shapes_img</span> <span class="o">=</span> <span class="n">black_img</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">shapes_img</span><span class="p">[</span><span class="mi">200</span><span class="p">:</span><span class="mi">300</span><span class="p">,</span><span class="mi">400</span><span class="p">:</span><span class="mi">450</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/green_rectangle.png" alt="Image with rectangle numpy" style="max-width: 75%; height: auto;"/></p> <p>But OpenCV has functions that do this in a simpler way. You can also add text</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cv</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">shapes_img</span><span class="p">,(</span><span class="mi">380</span><span class="p">,</span><span class="mi">50</span><span class="p">),(</span><span class="mi">410</span><span class="p">,</span><span class="mi">130</span><span class="p">),(</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">3</span><span class="p">)</span> <span class="c1"># Green rectangle with thickness 3
</span><span class="n">cv</span><span class="p">.</span><span class="nf">line</span><span class="p">(</span><span class="n">shapes_img</span><span class="p">,(</span><span class="mi">380</span><span class="p">,</span><span class="mi">50</span><span class="p">),(</span><span class="mi">410</span><span class="p">,</span><span class="mi">130</span><span class="p">),(</span><span class="mi">255</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="mi">5</span><span class="p">)</span> <span class="c1"># Red line with thickness 5
</span><span class="n">cv</span><span class="p">.</span><span class="nf">circle</span><span class="p">(</span><span class="n">shapes_img</span><span class="p">,(</span><span class="mi">120</span><span class="p">,</span><span class="mi">300</span><span class="p">),</span> <span class="mi">60</span><span class="p">,</span> <span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span> <span class="n">cv</span><span class="p">.</span><span class="n">FILLED</span><span class="p">)</span> <span class="c1"># Blue filled circle
</span><span class="n">font</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="n">FONT_HERSHEY_SIMPLEX</span>
<span class="n">cv</span><span class="p">.</span><span class="nf">putText</span><span class="p">(</span><span class="n">shapes_img</span><span class="p">,</span><span class="sh">'</span><span class="s">Sample text</span><span class="sh">'</span><span class="p">,(</span><span class="mi">25</span><span class="p">,</span><span class="mi">475</span><span class="p">),</span> <span class="n">font</span><span class="p">,</span> <span class="mi">2</span><span class="p">,(</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">,</span><span class="mi">255</span><span class="p">),</span><span class="mi">2</span><span class="p">,</span><span class="n">cv</span><span class="p">.</span><span class="n">LINE_AA</span><span class="p">)</span> <span class="c1"># White text
</span></code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/shapes_opencv.png" alt="Image with shapes OpenCV" style="max-width: 75%; height: auto;"/></p> <h3 id="image-translation-rotation-and-flipping">Image Translation, Rotation, and Flipping</h3> <p>Using OpenCV, basic image transformations are straightforward to implement. Just keep in mind that some of these transformations can be destructive, that is, you might lose information from the original image in the process.</p> <h4 id="translation-move">Translation (move)</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/park.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">translate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">):</span>
    <span class="n">transMat</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">float32</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="n">x</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="n">y</span><span class="p">]])</span>
    <span class="n">dimensions</span> <span class="o">=</span> <span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">cv</span><span class="p">.</span><span class="nf">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">transMat</span><span class="p">,</span> <span class="n">dimensions</span><span class="p">)</span>

<span class="n">translated</span> <span class="o">=</span> <span class="nf">translate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="o">-</span><span class="mi">100</span><span class="p">,</span> <span class="mi">100</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/park_translation.png" alt="Translation" style="max-width: 100%; height: auto;"/></p> <h4 id="rotation">Rotation</h4> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="n">rotPoint</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="p">(</span><span class="n">height</span><span class="p">,</span><span class="n">width</span><span class="p">)</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">rotPoint</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">rotPoint</span> <span class="o">=</span> <span class="p">(</span><span class="n">width</span><span class="o">//</span><span class="mi">2</span><span class="p">,</span><span class="n">height</span><span class="o">//</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">rotMat</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">getRotationMatrix2D</span><span class="p">(</span><span class="n">rotPoint</span><span class="p">,</span> <span class="n">angle</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">)</span>
    <span class="n">dimensions</span> <span class="o">=</span> <span class="p">(</span><span class="n">width</span><span class="p">,</span><span class="n">height</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">cv</span><span class="p">.</span><span class="nf">warpAffine</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">rotMat</span><span class="p">,</span> <span class="n">dimensions</span><span class="p">)</span>

<span class="n">rotated</span> <span class="o">=</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="o">-</span><span class="mi">45</span><span class="p">)</span>
<span class="n">rotated_rotated</span> <span class="o">=</span> <span class="nf">rotate</span><span class="p">(</span><span class="n">rotated</span><span class="p">,</span> <span class="o">-</span><span class="mi">45</span><span class="p">)</span>
</code></pre></div></div> <p>Note that in the second rotation, some parts of the image are lost. If you would want to keep as much information as possible you could rotate the original image by <code class="language-plaintext highlighter-rouge">-90</code> degrees instead of rotating the rotated image.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/park_rotation.png" alt="Rotated" style="max-width: 100%; height: auto;"/></p> <h4 id="flipping">Flipping</h4> <p>Flipping an image in OpenCV is done with <code class="language-plaintext highlighter-rouge">cv.flip()</code>, where the second argument specifies the direction: <code class="language-plaintext highlighter-rouge">0</code> for vertical flip, <code class="language-plaintext highlighter-rouge">1</code> for horizontal, and <code class="language-plaintext highlighter-rouge">-1</code> for both simultaneously.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">flip</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">flip</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="n">mirrored</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">flip</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/park_flip.png" alt="Flipped and mirrored" style="max-width: 100%; height: auto;"/></p> <h4 id="cropping">Cropping</h4> <p>Since the image is an array we can also crop it as you would an array.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cropped</span> <span class="o">=</span> <span class="n">img</span><span class="p">[</span><span class="mi">200</span><span class="p">:</span><span class="mi">400</span><span class="p">,</span> <span class="mi">300</span><span class="p">:</span><span class="mi">400</span><span class="p">]</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/park_crop.png" alt="Croped" style="max-width: 100%; height: auto;"/></p> <h3 id="converting-colour-spaces">Converting Colour Spaces</h3> <p>As we have seen before, OpenCV loads images in the BGR colour space by default. However, in some cases, it’s useful to convert the image to a different colour space depending on what you’re trying to do. This can be done with the <code class="language-plaintext highlighter-rouge">cv.cvtColor</code> function.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">cat</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cat.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">rgb</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">cat</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>
<span class="n">gray</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">cat</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>
<span class="n">lab</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">cat</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2LAB</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/colour_spaces.png" alt="Colour Spaces" style="max-width: 100%; height: auto;"/></p> <h3 id="smoothing-and-blurring">Smoothing and Blurring</h3> <p>Smoothing or blurring an image is a common preprocessing step in computer vision to reduce noise or detail. Most blurring functions in OpenCV work by applying a kernel — a small matrix that moves over the image and combines pixel values in a neighborhood. The size of the kernel (like <code class="language-plaintext highlighter-rouge">(11,11)</code>) defines how many surrounding pixels influence the result. Larger kernels produce stronger blurs but can also remove more detail. Different functions apply different strategies: simple averaging, Gaussian-weighted smoothing, median filtering, or edge-preserving bilateral filtering.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cats.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>

<span class="n">average</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">blur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">))</span>
<span class="n">gauss</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nc">GaussianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="p">(</span><span class="mi">11</span><span class="p">,</span><span class="mi">11</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">median</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">medianBlur</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="mi">11</span><span class="p">)</span>
<span class="n">bilateral</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">bilateralFilter</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">35</span><span class="p">,</span> <span class="mi">25</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/cats_blur.png" alt="Blurring" style="max-width: 100%; height: auto;"/></p> <h3 id="thresholding">Thresholding</h3> <p>Thresholding is a technique used in image processing to segment an image into different regions based on pixel intensity values. It is particularly useful in converting a grayscale image into a binary image. The image is divided into two classes: foreground and background. Thresholding helps to highlight objects or features of interest while discarding irrelevant information.</p> <p>In simple thresholding, a fixed threshold value is chosen, and pixels in the image are classified as foreground or background based on their intensity value relative to this threshold.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cats.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">gray</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2GRAY</span><span class="p">)</span>

<span class="c1"># Simple Thresholding
</span><span class="n">threshold</span><span class="p">,</span> <span class="n">thresh</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">THRESH_BINARY</span> <span class="p">)</span>
<span class="n">threshold</span><span class="p">,</span> <span class="n">thresh_inv</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">threshold</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">150</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">THRESH_BINARY_INV</span> <span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/simple_thresholding.png" alt="Thresholding" style="max-width: 100%; height: auto;"/></p> <p>Adaptive thresholding instead calculates a different threshold for each pixel based on its local neighborhood.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">adaptive_thresh_mean</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">adaptiveThreshold</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">ADAPTIVE_THRESH_MEAN_C</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="p">,</span> <span class="mi">201</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
<span class="n">adaptive_thresh_gauss</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">adaptiveThreshold</span><span class="p">(</span><span class="n">gray</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">ADAPTIVE_THRESH_GAUSSIAN_C</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">THRESH_BINARY</span><span class="p">,</span> <span class="mi">201</span><span class="p">,</span> <span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/adaptive_thresholding.png" alt="Adaptive Thresholding" style="max-width: 100%; height: auto;"/></p> <h3 id="masking">Masking</h3> <p>The final thing that we will check is masking. The concept is simple, where a mask (a binary image) is used to isolate or highlight specific regions of interest in an image. In this case, we create a mask with shapes such as circles and rectangles and then combine them. By using bitwise operations, such as <code class="language-plaintext highlighter-rouge">cv.bitwise_and()</code>, we apply the mask to the original image, resulting in an image where only the masked areas are visible, and everything else is set to black (or transparent). This technique is often used in image segmentation, object detection, and background removal.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">imread</span><span class="p">(</span><span class="sh">'</span><span class="s">Resources/Photos/cats 2.jpg</span><span class="sh">'</span><span class="p">)</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">cvtColor</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cv</span><span class="p">.</span><span class="n">COLOR_BGR2RGB</span><span class="p">)</span>

<span class="c1"># Create blank mask
</span><span class="n">blank</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nf">zeros</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[:</span><span class="mi">2</span><span class="p">],</span> <span class="n">dtype</span><span class="o">=</span><span class="sh">'</span><span class="s">uint8</span><span class="sh">'</span><span class="p">)</span>
<span class="c1"># Circle mask
</span><span class="n">circle</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">circle</span><span class="p">(</span><span class="n">blank</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">//</span><span class="mi">2</span> <span class="o">+</span> <span class="mi">45</span><span class="p">,</span> <span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">//</span><span class="mi">2</span><span class="p">),</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># Rectangle mask
</span><span class="n">rectangle</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">rectangle</span><span class="p">(</span><span class="n">blank</span><span class="p">.</span><span class="nf">copy</span><span class="p">(),</span> <span class="p">(</span><span class="mi">30</span><span class="p">,</span> <span class="mi">30</span><span class="p">),</span> <span class="p">(</span><span class="mi">370</span><span class="p">,</span> <span class="mi">370</span><span class="p">),</span> <span class="mi">255</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span>
<span class="c1"># Combine masks
</span><span class="n">weird_shape</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">bitwise_and</span><span class="p">(</span><span class="n">circle</span><span class="p">,</span> <span class="n">rectangle</span><span class="p">)</span>
<span class="c1"># Apply mask
</span><span class="n">masked</span> <span class="o">=</span> <span class="n">cv</span><span class="p">.</span><span class="nf">bitwise_and</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">img</span><span class="p">,</span> <span class="n">mask</span><span class="o">=</span><span class="n">weird_shape</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-24-open-cv-tutorial-example-project/masked_image.png" alt="Masked image" style="max-width: 100%; height: auto;"/></p> <h3 id="conclusion">Conclusion</h3> <p>That’s pretty much everything I used to teach undergrads about OpenCV in Python. If you’re curious to explore a bit more, the Jupyter notebook includes an extra section on contour detection, but I decided to leave it out of the blog post to keep things from getting too long.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="OpenCV"/><category term="Python"/><category term="Computer-Vision"/><category term="Image-Processing"/><category term="Video"/><summary type="html"><![CDATA[A hands-on guide to computer vision using OpenCV in Python. I cover the core image and video processing functions available in OpenCV, with plenty of working code examples.]]></summary></entry><entry><title type="html">PostgreSQL + PostGIS on Raspberry Pi with Docker: My Setup for a Local Geospatial Database</title><link href="https://mariohevia.github.io/blog/2025/postgresql-postgis-on-raspberry-pi-with-docker/" rel="alternate" type="text/html" title="PostgreSQL + PostGIS on Raspberry Pi with Docker: My Setup for a Local Geospatial Database"/><published>2025-04-04T00:00:00+00:00</published><updated>2025-04-04T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/postgresql-postgis-on-raspberry-pi-with-docker</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/postgresql-postgis-on-raspberry-pi-with-docker/"><![CDATA[<p>For my crime mapping project, one of the biggest performance bottlenecks was pulling data live from the API, especially when requesting multiple months of data. So, I decided to move everything to a local PostgreSQL database with PostGIS for spatial support.</p> <p>Rather than using a laptop 24/7 or paying for a cloud server, I used a Raspberry Pi 4 I had lying around. It’s cheap, quiet, and perfect for running a lightweight server at home. In this post, I will walk through my exact setup so you can replicate it.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-04-04-postgresql-postgis-on-raspberry-pi-with-docker/rpi-pg-docker-post-logo.png" alt="PostgreSQL + PostGIS on Raspberry Pi with Docker" style="max-width: 75%; height: auto;"/></p> <h3 id="why-a-local-database">Why a Local Database?</h3> <p>My app used to fetch data dynamically from the UK Police. But:</p> <ul> <li>The API can be slow when requesting large time ranges</li> <li>The UK Police API is updated approximately once a month, so there’s no need to fetch live data in real time</li> <li>I want to add other geospatial data like population density, employment, and others</li> </ul> <p>By using PostgreSQL + PostGIS locally, I get:</p> <ul> <li>Persistent storage of API data</li> <li>Fast spatial queries using geometry indexes</li> <li>Full control over data, backups, and indexing</li> </ul> <p>And all of this runs quietly on a Raspberry Pi 4 next to my router.</p> <h3 id="installing-an-operating-system-into-the-raspberry-pi">Installing an Operating System into the Raspberry Pi</h3> <p>To install an operating system (OS) on a Raspberry Pi, you need an SD Card and the Raspberry Pi Imager, which you can download from <a href="https://www.raspberrypi.com/software/">here</a>.</p> <p>With the Raspberry Pi Imager, you can flash the SD Card like this:</p> <ol> <li><strong>Open Raspberry Pi Imager</strong></li> <li><strong>Choose Device</strong>: Raspberry Pi 4</li> <li><strong>Choose OS</strong>: Other general-purpose OS &gt; Ubuntu &gt; Ubuntu Server (64-bit)</li> <li><strong>Choose storage</strong>: Internal SD card reader</li> <li><strong>OS customisation</strong>: Press <code class="language-plaintext highlighter-rouge">Ctrl+Shift+X</code> for advanced settings: <ul> <li>Set hostname: <code class="language-plaintext highlighter-rouge">pi4.local</code></li> <li>Username: <code class="language-plaintext highlighter-rouge">myuser</code></li> <li>Password: <code class="language-plaintext highlighter-rouge">mypassword</code></li> <li>Configure wireless LAN</li> <li>Set locale settings</li> <li>Enable SSH (use password authentication)</li> </ul> </li> </ol> <p>You can notice that I used an Ubuntu Server as OS instead of the recommended Raspberry Pi OS. This is because this Raspberry Pi will only run the PostgreSQL server and I do not want any overhead from running a full OS.</p> <p>Once the SD card is flashed, remove it and plug it into the Raspberry Pi.</p> <h3 id="ssh-and-securing-the-server">SSH and Securing the Server</h3> <p>After booting the Pi, connect via SSH:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Remove old IP from known_hosts (if you reused the Pi)</span>
nano ~/.ssh/known_hosts

<span class="c"># Connect</span>
ssh myuser@pi4.local
</code></pre></div></div> <p>Then update the system:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt update <span class="o">&amp;&amp;</span> <span class="nb">sudo </span>apt upgrade <span class="nt">-y</span>
<span class="nb">sudo </span>apt <span class="nb">install </span>python-is-python3
</code></pre></div></div> <p>Next, set up SSH keys for passwordless login:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen <span class="nt">-t</span> rsa <span class="nt">-b</span> 8192 <span class="nt">-f</span> ~/.ssh/pi4_rsa
ssh-copy-id <span class="nt">-i</span> ~/.ssh/pi4_rsa.pub myuser@pi4.local
</code></pre></div></div> <p>Then for security, disable password SSH by running <code class="bash">sudo nano /etc/ssh/sshd_config</code> and changing the following lines:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PasswordAuthentication no
PubkeyAuthentication <span class="nb">yes</span>
</code></pre></div></div> <p>Finally, restart the SSH daemon (server) in the Raspberry Pi.</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>systemctl restart sshd
</code></pre></div></div> <h3 id="installing-docker-on-raspberry-pi">Installing Docker on Raspberry Pi</h3> <p>Now it’s time to install Docker. To do so, I would recommend following the instructions <a href="https://docs.docker.com/engine/install/ubuntu/">here</a>. For your convenience, I put them here too:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get update
<span class="nb">sudo </span>apt-get <span class="nb">install </span>ca-certificates curl
<span class="nb">sudo install</span> <span class="nt">-m</span> 0755 <span class="nt">-d</span> /etc/apt/keyrings
<span class="nb">sudo </span>curl <span class="nt">-fsSL</span> https://download.docker.com/linux/ubuntu/gpg <span class="nt">-o</span> /etc/apt/keyrings/docker.asc
<span class="nb">sudo chmod </span>a+r /etc/apt/keyrings/docker.asc
</code></pre></div></div> <p>Then add the Docker repo:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="se">\</span>
<span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu </span><span class="se">\</span><span class="s2">
</span><span class="si">$(</span><span class="nb">.</span> /etc/os-release <span class="o">&amp;&amp;</span> <span class="nb">echo</span> <span class="s2">"</span><span class="k">${</span><span class="nv">UBUNTU_CODENAME</span><span class="k">:-</span><span class="nv">$VERSION_CODENAME</span><span class="k">}</span><span class="s2">"</span><span class="si">)</span><span class="s2"> stable"</span> | <span class="se">\</span>
<span class="nb">sudo tee</span> /etc/apt/sources.list.d/docker.list <span class="o">&gt;</span> /dev/null
</code></pre></div></div> <p>Install the latest version:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nb">install </span>docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
</code></pre></div></div> <p>Optionally, you can also allow Docker to run without root privileges by running:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>groupadd docker
<span class="nb">sudo </span>usermod <span class="nt">-aG</span> docker <span class="nv">$USER</span>
</code></pre></div></div> <p>Log out and back in, or reboot.</p> <h3 id="running-postgis-in-docker">Running PostGIS in Docker</h3> <p>Since Raspberry Pi has an <code class="language-plaintext highlighter-rouge">arm64</code> architecture, we need a Docker image that supports it. Browsing Docker Hub, I found the <a href="https://hub.docker.com/r/kartoza/postgis">kartoza/postgis</a> image, which comes with PostGIS pre-installed, so we do not need to create our own image.</p> <p>First, I set some environment variables that will be used later (change the values as needed):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export DB_PASSWORD="mypassword"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export DB_NAME="postgis"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export DB_USER="postgres"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">echo</span> <span class="s1">'export DB_PORT="5432"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
</code></pre></div></div> <p>Then run the container using the environment variables that we set above:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker run <span class="nt">--name</span> postgis-container <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">POSTGRES_PASSWORD</span><span class="o">=</span><span class="nv">$DB_PASSWORD</span> <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">POSTGRES_DB</span><span class="o">=</span><span class="nv">$DB_NAME</span> <span class="se">\</span>
  <span class="nt">-e</span> <span class="nv">POSTGRES_USER</span><span class="o">=</span><span class="nv">$DB_USER</span> <span class="se">\</span>
  <span class="nt">-p</span> <span class="nv">$DB_PORT</span>:5432 <span class="se">\</span>
  <span class="nt">-v</span> postgis_data:/var/lib/postgresql/data <span class="se">\</span>
  <span class="nt">--restart</span> unless-stopped <span class="se">\</span>
  <span class="nt">-d</span> kartoza/postgis:16-3.4
</code></pre></div></div> <p>Afterwards, you can run an interactive PostgreSQL terminal inside the container with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker <span class="nb">exec</span> <span class="nt">-it</span> postgis-container su postgres <span class="nt">-c</span> <span class="s2">"psql"</span>
</code></pre></div></div> <p>Here you can create a new database or use the one initially created, as in any other PostgreSQL server. In my case, I did:</p> <div class="language-sql highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">CREATE</span> <span class="k">DATABASE</span> <span class="n">crime_uk</span><span class="p">;</span>
<span class="err">\</span><span class="k">c</span> <span class="n">crime_uk</span>
<span class="k">CREATE</span> <span class="n">EXTENSION</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="n">postgis</span><span class="p">;</span>

<span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="n">crimes</span> <span class="p">(</span>
    <span class="n">crime_id</span> <span class="nb">TEXT</span> <span class="k">PRIMARY</span> <span class="k">KEY</span><span class="p">,</span>
    <span class="k">month</span> <span class="nb">DATE</span><span class="p">,</span>
    <span class="n">reported_by</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">falls_within</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">longitude</span> <span class="nb">DOUBLE</span> <span class="nb">PRECISION</span><span class="p">,</span>
    <span class="n">latitude</span> <span class="nb">DOUBLE</span> <span class="nb">PRECISION</span><span class="p">,</span>
    <span class="k">location</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">lsoa_code</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">lsoa_name</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">crime_type</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">last_outcome_category</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">context</span> <span class="nb">TEXT</span><span class="p">,</span>
    <span class="n">geom</span> <span class="n">GEOMETRY</span><span class="p">(</span><span class="n">Point</span><span class="p">,</span> <span class="mi">4326</span><span class="p">)</span>
<span class="p">);</span>
<span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">IF</span> <span class="k">NOT</span> <span class="k">EXISTS</span> <span class="n">crimes_geom_idx</span> <span class="k">ON</span> <span class="n">crimes</span> <span class="k">USING</span> <span class="n">GIST</span> <span class="p">(</span><span class="n">geom</span><span class="p">);</span>
</code></pre></div></div> <p>This SQL script creates the database <code class="language-plaintext highlighter-rouge">crime_uk</code>, then enables the PostGIS extension and creates a table with the <code class="language-plaintext highlighter-rouge">geom</code> column being a special PostGIS geometry column that stores the point location in the WGS84 coordinate system (SRID 4326). In addition, it indexes the <code class="language-plaintext highlighter-rouge">geom</code> column to accelerate spatial queries.</p> <h3 id="connecting-from-python">Connecting from Python</h3> <p>This part happens <strong>outside of Docker</strong> but still in the Ubuntu server. If you want to use another computer other than the Raspberry Pi to connect to the database, you will need to modify the <code class="language-plaintext highlighter-rouge">pg_hba.conf</code> inside the container. I do not need this, so I will not mention how to do it here, but a simple search in your favourite search engine can tell you how to do this.</p> <p>The first step to connect is to get the container IP:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>docker inspect postgis-container | <span class="nb">grep </span>IPAddress
</code></pre></div></div> <p>Save it as an env variable (change <code class="language-plaintext highlighter-rouge">172.17.0.2</code> for your IP):</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export DB_HOST="172.17.0.2"'</span> <span class="o">&gt;&gt;</span> ~/.bashrc
<span class="nb">source</span> ~/.bashrc
</code></pre></div></div> <p>Then, you need to install the Python dependencies. I always recommend creating an environment:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt <span class="nb">install </span>python3-venv python3-pip libpq-dev
python3 <span class="nt">-m</span> venv envCrime
<span class="nb">source </span>envCrime/bin/activate
pip <span class="nb">install </span>pandas psycopg2 requests
</code></pre></div></div> <p><strong>NOTE:</strong> <code class="language-plaintext highlighter-rouge">psycopg2</code> requires you to install <code class="language-plaintext highlighter-rouge">libpq-dev</code>. If you do not want to install it, you can use <code class="language-plaintext highlighter-rouge">psycopg2-binary</code> instead, which has precompiled binaries.</p> <p>I will leave you with a simple example to create a connection using Python:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">psycopg2</span>
<span class="kn">import</span> <span class="n">os</span>

<span class="n">conn</span> <span class="o">=</span> <span class="n">psycopg2</span><span class="p">.</span><span class="nf">connect</span><span class="p">(</span>
    <span class="n">dbname</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DB_NAME</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">user</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DB_USER</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">password</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DB_PASSWORD</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">host</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DB_HOST</span><span class="sh">"</span><span class="p">),</span>
    <span class="n">port</span><span class="o">=</span><span class="n">os</span><span class="p">.</span><span class="nf">getenv</span><span class="p">(</span><span class="sh">"</span><span class="s">DB_PORT</span><span class="sh">"</span><span class="p">)</span>
<span class="p">)</span>

<span class="n">cursor</span> <span class="o">=</span> <span class="n">conn</span><span class="p">.</span><span class="nf">cursor</span><span class="p">()</span>
<span class="n">cursor</span><span class="p">.</span><span class="nf">execute</span><span class="p">(</span><span class="sh">"</span><span class="s">SELECT COUNT(*) FROM crimes;</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">cursor</span><span class="p">.</span><span class="nf">fetchone</span><span class="p">())</span>
<span class="n">conn</span><span class="p">.</span><span class="nf">close</span><span class="p">()</span>
</code></pre></div></div> <p>Now I (and hopefully you too) have a fully local geospatial database server that runs quietly on my desk and costs nothing to operate, aside from a bit of electricity.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Raspberry-Pi"/><category term="Docker"/><category term="PostGIS"/><category term="PostgreSQL"/><category term="Python"/><category term="Geospatial"/><category term="SQL"/><summary type="html"><![CDATA[I walk through my full setup for running a geospatial PostgreSQL database (with PostGIS) on a Raspberry Pi using Docker, and connecting to it from Python. This lets me run everything locally for data analysis, with full control.]]></summary></entry><entry><title type="html">Mapping UK Street Crime: An Interactive Data Visualisation Using Police Data</title><link href="https://mariohevia.github.io/blog/2025/mapping-uk-street-crime/" rel="alternate" type="text/html" title="Mapping UK Street Crime: An Interactive Data Visualisation Using Police Data"/><published>2025-03-31T00:00:00+00:00</published><updated>2025-03-31T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/mapping-uk-street-crime</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/mapping-uk-street-crime/"><![CDATA[<p>Lately, some friends and I have been thinking about buying houses, and one of the biggest concerns for us is safety. We wanted to check crime data for different areas, so I tried using a few online tools. The problem? Most of them either required a subscription (e.g. <a href="https://crimerate.co.uk/">https://crimerate.co.uk/</a>) or were missing key features I wanted (e.g. <a href="https://www.adt.co.uk/crime-in-my-area">https://www.adt.co.uk/crime-in-my-area</a>).</p> <p>Since I couldn’t find exactly what I was looking for, I decided to build it myself. My <a href="https://crimedatauk.streamlit.app/">website</a> uses UK police crime data to map out street-level crime. You can click on the map using postcodes or draw custom areas to see detailed crime stats. My goal was to make something simple, free, and actually useful for people who want to buy a house and care about safety in their neighborhoods.</p> <p style="text-align:center"><a href="https://crimedatauk.streamlit.app/"><img src="../../../assets/img/blog_images/2025-03-31-mapping-uk-street-crime/app_preview.png" alt="Crime data app" style="max-width: 100%; height: auto;"/></a></p> <p>In this post, I will walk you through how I built the web app and share some features I plan to add in the future.</p> <h3 id="building-the-app-with-streamlit">Building the App with Streamlit</h3> <p>I wanted this tool to be easy to use and quick to set up, so I went with Streamlit. If you haven’t used it before, Streamlit is a Python library that lets you turn scripts into interactive web apps with just a few lines of code. Without needing to mess with frontend development, complex UI frameworks, or deployment headaches. In addition, it can be easily deployed in the <a href="https://share.streamlit.io/">Streamlit Community Cloud</a> or locally using Docker. I used Streamlit Community Cloud, but I plan to migrate to my home server later when I implement some of the planned improvements.</p> <p>The entire interface of the app is built using Streamlit’s widgets. Users can enter a postcode or draw a custom area on the map, and Streamlit handles the interactions. The map itself is powered by folium, which allows me to overlay the crime data on top of a standard street map. Once the user selects a location, the app fetches the latest crime data from the <a href="https://data.police.uk/docs/">UK Police API</a> and displays it directly on the map. Additionally, using Streamlit I can cache information to avoid calling the API several times for the same information.</p> <h3 id="data-retrieval-from-the-uk-police-api">Data Retrieval from the UK Police API</h3> <p>The first step in this project was fetching street crime data using the <a href="https://data.police.uk/docs/">UK Police API</a>. The API provides crime reports categorised by type and location, updated monthly.</p> <p>To retrieve data for a specific location, we query the API using latitude and longitude coordinates or boundary points of a custom area. Here is the function I built to pull crime data based on the latitude and longitude coordinates:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@st.cache_data</span><span class="p">(</span><span class="n">ttl</span><span class="o">=</span><span class="sh">'</span><span class="s">30d</span><span class="sh">'</span><span class="p">,</span><span class="n">max_entries</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span><span class="n">show_spinner</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_crime_street_level_point</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="nb">long</span><span class="p">,</span> <span class="n">date</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="c1"># Define the base URL for the UK Police API endpoint
</span>    <span class="n">base_url</span> <span class="o">=</span> <span class="sh">"</span><span class="s">https://data.police.uk/api/crimes-street/all-crime</span><span class="sh">"</span>

    <span class="c1"># Set up the required parameters for the API request
</span>    <span class="n">params</span> <span class="o">=</span> <span class="p">{</span>
        <span class="sh">'</span><span class="s">lat</span><span class="sh">'</span><span class="p">:</span> <span class="n">lat</span><span class="p">,</span>
        <span class="sh">'</span><span class="s">lng</span><span class="sh">'</span><span class="p">:</span> <span class="nb">long</span>
    <span class="p">}</span>

    <span class="c1"># Add date parameter if provided and in valid format
</span>    <span class="k">if</span> <span class="n">date</span> <span class="o">!=</span> <span class="bp">None</span> <span class="ow">and</span> <span class="nf">is_valid_date_format</span><span class="p">(</span><span class="n">date</span><span class="p">):</span>
        <span class="n">params</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">date</span>

    <span class="c1"># Make the API request
</span>    <span class="n">response</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">base_url</span><span class="p">,</span> <span class="n">params</span><span class="p">)</span>

    <span class="c1"># Check if the request was successful
</span>    <span class="k">if</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="o">==</span> <span class="mi">200</span><span class="p">:</span>
        <span class="k">return</span> <span class="n">response</span><span class="p">.</span><span class="nf">json</span><span class="p">(),</span> <span class="mi">200</span> <span class="c1"># Return parsed JSON data and success code
</span>    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[],</span> <span class="n">response</span><span class="p">.</span><span class="n">status_code</span> <span class="c1"># Return empty list and error code
</span></code></pre></div></div> <p>The function uses the request library to query the crimes-street endpoint of the API and returns the crime incidents that occurred in a 1-mile radius to the specified geographic coordinates as a list of dictionaries. An important thing to notice is that the function is cached with the decorator <code class="language-python">@st.cache_data</code>, reducing the number of redundant API calls.</p> <h3 id="interactive-crime-mapping">Interactive Crime Mapping</h3> <p>After getting the data, the next step was to transform it into a Pandas DataFrame for manipulation and visualization. All the functions I built that pull data from the API return crimes as a list of dictionaries. The easiest way way to turn that into a DataFrame is by using <code class="language-python">pd.json_normalize()</code> from pandas, which flattens the nested data into a DataFrame and makes it simple to filter by crime type.</p> <p>To create the map I use <code>streamlit_folium</code>. First, I create a map with its feature group, then I retrieve, filter and transform the data and finally I display the markers (in our case bubbles) in the map.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Create the map
</span><span class="n">map_click</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="nc">Map</span><span class="p">(</span><span class="n">location</span><span class="o">=</span><span class="n">center</span><span class="p">,</span> <span class="n">zoom_start</span><span class="o">=</span><span class="n">zoom</span><span class="p">)</span>

<span class="c1"># Create a feature group to add crimes later
</span><span class="n">fg</span> <span class="o">=</span> <span class="n">folium</span><span class="p">.</span><span class="nc">FeatureGroup</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">"</span><span class="s">Marker</span><span class="sh">"</span><span class="p">)</span>

<span class="c1"># If there is a click in the map store the click location
</span><span class="k">if</span> <span class="sh">'</span><span class="s">map_click</span><span class="sh">'</span> <span class="ow">in</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">:</span>
    <span class="k">if</span> <span class="sh">"</span><span class="s">last_clicked</span><span class="sh">"</span> <span class="ow">in</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">'</span><span class="s">map_click</span><span class="sh">'</span><span class="p">]</span> <span class="ow">and</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">'</span><span class="s">map_click</span><span class="sh">'</span><span class="p">][</span><span class="sh">"</span><span class="s">last_clicked</span><span class="sh">"</span><span class="p">]</span> <span class="o">!=</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">"</span><span class="s">selected_location_click</span><span class="sh">"</span><span class="p">]</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">'</span><span class="s">map_click</span><span class="sh">'</span><span class="p">][</span><span class="sh">"</span><span class="s">last_clicked</span><span class="sh">"</span><span class="p">]</span>

<span class="c1"># Display crimes in selected location
</span><span class="k">if</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">"</span><span class="s">selected_location_click</span><span class="sh">"</span><span class="p">]:</span>
    <span class="n">lat</span><span class="p">,</span> <span class="n">lon</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">"</span><span class="s">selected_location_click</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">lat</span><span class="sh">"</span><span class="p">],</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">"</span><span class="s">selected_location_click</span><span class="sh">"</span><span class="p">][</span><span class="sh">"</span><span class="s">lng</span><span class="sh">"</span><span class="p">]</span>
    <span class="n">list_crimes</span><span class="p">,</span> <span class="n">status_code</span> <span class="o">=</span> <span class="nf">get_crime_street_level_point_dates</span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">,</span> <span class="n">st</span><span class="p">.</span><span class="n">session_state</span><span class="p">[</span><span class="sh">"</span><span class="s">map_click_list_crime_dates</span><span class="sh">"</span><span class="p">])</span>
    <span class="n">crime_data</span> <span class="o">=</span> <span class="nf">list_crimes_to_df</span><span class="p">(</span><span class="n">list_crimes</span><span class="p">)</span>

<span class="c1"># Filter data based on a "pills" widget
</span><span class="n">filtered_crime_data</span> <span class="o">=</span> <span class="nf">add_pills_filter_df</span><span class="p">(</span><span class="n">crime_data</span><span class="p">)</span>

<span class="c1"># Count and plot crime occurrences as bubbles
</span><span class="nf">add_crime_counts_to_map</span><span class="p">(</span><span class="n">filtered_crime_data</span><span class="p">,</span> <span class="n">fg</span><span class="p">)</span>

<span class="c1"># Display map
</span><span class="n">map_data</span> <span class="o">=</span> <span class="nf">st_folium</span><span class="p">(</span><span class="n">map_click</span><span class="p">,</span> 
    <span class="n">feature_group_to_add</span><span class="o">=</span><span class="n">fg</span><span class="p">,</span>
    <span class="n">zoom</span><span class="o">=</span><span class="n">zoom</span><span class="p">,</span>
    <span class="n">height</span><span class="o">=</span><span class="mi">500</span><span class="p">,</span> 
    <span class="n">width</span><span class="o">=</span><span class="mi">700</span><span class="p">,</span> 
    <span class="n">key</span><span class="o">=</span><span class="sh">'</span><span class="s">map_click</span><span class="sh">'</span><span class="p">,</span>
    <span class="n">returned_objects</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">last_clicked</span><span class="sh">"</span><span class="p">],</span>
    <span class="n">center</span><span class="o">=</span><span class="n">center</span><span class="p">)</span>
</code></pre></div></div> <p>To filter the DataFrame, I use the <a href="https://docs.streamlit.io/develop/api-reference/widgets/st.pills">Streamlit pills widget</a>, which displays a multi-selection pill component. This lets the user choose which crime categories to focus on, and the DataFrame is filtered to reflect their selections.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_pills_filter_df</span><span class="p">(</span><span class="n">df</span><span class="o">=</span><span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">()):</span>
    <span class="c1"># Create a pills selector with pretty category names as options
</span>    <span class="n">pretty_selection</span> <span class="o">=</span> <span class="n">st</span><span class="p">.</span><span class="nf">pills</span><span class="p">(</span><span class="sh">"</span><span class="s">Crime Category</span><span class="sh">"</span><span class="p">,</span> <span class="n">FROM_PRETTY_CATEGORIES</span><span class="p">.</span><span class="nf">keys</span><span class="p">(),</span> <span class="n">selection_mode</span><span class="o">=</span><span class="sh">"</span><span class="s">multi</span><span class="sh">"</span><span class="p">,</span> <span class="n">default</span><span class="o">=</span><span class="n">FROM_PRETTY_CATEGORIES</span><span class="p">.</span><span class="nf">keys</span><span class="p">())</span>

    <span class="c1"># Convert selected pretty category names back to original category codes
</span>    <span class="n">selection</span> <span class="o">=</span> <span class="p">[</span><span class="n">FROM_PRETTY_CATEGORIES</span><span class="p">[</span><span class="n">cat</span><span class="p">]</span> <span class="k">for</span> <span class="n">cat</span> <span class="ow">in</span> <span class="n">pretty_selection</span><span class="p">]</span>

    <span class="c1"># Only filter if the DataFrame is not empty
</span>    <span class="k">if</span> <span class="n">df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">:</span>
        <span class="c1"># Filter the DataFrame to include only selected categories
</span>        <span class="n">filtered_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">category</span><span class="sh">'</span><span class="p">].</span><span class="nf">isin</span><span class="p">(</span><span class="n">selection</span><span class="p">)].</span><span class="nf">copy</span><span class="p">()</span>
        <span class="k">return</span> <span class="n">filtered_df</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="c1"># Return a copy of the original DataFrame if it's empty
</span>        <span class="k">return</span> <span class="n">df</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
</code></pre></div></div> <p>The last thing to do is create the bubble markers using the function <code class="language-python">add_crime_counts_to_map()</code>.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">add_crime_counts_to_map</span><span class="p">(</span><span class="n">crime_df</span><span class="p">,</span> <span class="n">feature_group</span><span class="p">):</span>
    <span class="c1"># Only proceed if the DataFrame contains data
</span>    <span class="k">if</span> <span class="n">crime_df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">:</span>
        <span class="c1"># Count total crimes at each unique location
</span>        <span class="n">crime_counts</span> <span class="o">=</span> <span class="n">crime_df</span><span class="p">.</span><span class="nf">value_counts</span><span class="p">(</span><span class="n">subset</span><span class="o">=</span><span class="p">[</span><span class="sh">'</span><span class="s">location_latitude</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">location_longitude</span><span class="sh">'</span><span class="p">],</span> <span class="n">sort</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
        <span class="n">max_counts</span> <span class="o">=</span> <span class="n">crime_counts</span><span class="p">.</span><span class="nf">max</span><span class="p">()</span>

        <span class="c1"># Count crimes per category at each location
</span>        <span class="n">category_counts</span> <span class="o">=</span> <span class="n">crime_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">([</span><span class="sh">'</span><span class="s">location_latitude</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">location_longitude</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">category</span><span class="sh">'</span><span class="p">]).</span><span class="nf">size</span><span class="p">()</span>

        <span class="c1"># Iterate through each location and its crime count
</span>        <span class="nf">for </span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">),</span> <span class="n">total_count</span> <span class="ow">in</span> <span class="n">crime_counts</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
            <span class="c1"># Normalize the count for visual scaling
</span>            <span class="n">norm_total_count</span> <span class="o">=</span> <span class="nf">_normalise</span><span class="p">(</span><span class="n">total_count</span><span class="p">,</span> <span class="n">max_counts</span><span class="p">)</span>

            <span class="c1"># Get crime counts for different categories at this location
</span>            <span class="n">category_data</span> <span class="o">=</span> <span class="n">category_counts</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">]</span> <span class="nf">if </span><span class="p">(</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">)</span> <span class="ow">in</span> <span class="n">category_counts</span><span class="p">.</span><span class="n">index</span> <span class="k">else</span> <span class="p">{}</span>
            
            <span class="c1"># Format the category breakdown for tooltip display
</span>            <span class="n">category_tooltip</span> <span class="o">=</span> <span class="sh">"</span><span class="s">&lt;br&gt;</span><span class="sh">"</span><span class="p">.</span><span class="nf">join</span><span class="p">([</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">TO_PRETTY_CATEGORIES</span><span class="p">[</span><span class="n">cat</span><span class="p">]</span><span class="si">}</span><span class="s">: </span><span class="si">{</span><span class="n">count</span><span class="si">}</span><span class="sh">"</span> <span class="k">for</span> <span class="n">cat</span><span class="p">,</span> <span class="n">count</span> <span class="ow">in</span> <span class="n">category_data</span><span class="p">.</span><span class="nf">items</span><span class="p">()])</span>

            <span class="c1"># Create tooltip text
</span>            <span class="n">tooltip_text</span> <span class="o">=</span> <span class="sa">f</span><span class="sh">"</span><span class="s">Total crimes: </span><span class="si">{</span><span class="n">total_count</span><span class="si">}</span><span class="s">&lt;br&gt;</span><span class="si">{</span><span class="n">category_tooltip</span><span class="si">}</span><span class="sh">"</span>

            <span class="c1"># Add circle marker to the map
</span>            <span class="n">feature_group</span><span class="p">.</span><span class="nf">add_child</span><span class="p">(</span>
                <span class="n">folium</span><span class="p">.</span><span class="nc">Circle</span><span class="p">(</span>
                    <span class="n">location</span><span class="o">=</span><span class="p">[</span><span class="n">lat</span><span class="p">,</span> <span class="n">lon</span><span class="p">],</span>
                    <span class="n">radius</span><span class="o">=</span><span class="mi">10</span> <span class="o">+</span> <span class="n">norm_total_count</span> <span class="o">*</span> <span class="mi">2</span><span class="p">,</span>  <span class="c1"># Scale size based on occurrences
</span>                    <span class="n">color</span><span class="o">=</span><span class="nf">color_function</span><span class="p">(</span><span class="n">norm_total_count</span><span class="p">),</span> <span class="c1"># Color based on crime intensity
</span>                    <span class="c1"># stroke=False,
</span>                    <span class="n">fill</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
                    <span class="n">fill_color</span><span class="o">=</span><span class="nf">color_function</span><span class="p">(</span><span class="n">norm_total_count</span><span class="p">),</span>
                    <span class="n">fill_opacity</span><span class="o">=</span><span class="mf">0.6</span><span class="p">,</span>
                    <span class="n">tooltip</span><span class="o">=</span><span class="n">tooltip_text</span> <span class="c1"># Interactive tooltip with crime details
</span>                <span class="p">))</span>
</code></pre></div></div> <h3 id="features-and-future-improvements">Features and Future Improvements</h3> <p>In this blog post I only showed only a barebones version of the clickable crime map. But the app has more features that what I showed.</p> <p>The web app provides multiple ways to interact with crime data:</p> <ul> <li><strong>Click on the Map</strong>: Clicking anywhere on the map fetches crime data for that location.</li> <li><strong>Search by Postcode</strong>: Users can enter a postcode to fetch and visualize crime data for that area.</li> <li><strong>Custom Area Selection</strong>: Users can draw a polygon on the map to analyze crime within a specific area.</li> <li><strong>Category Filters</strong>: Crimes can be filtered by category (e.g., burglary, violence, drug offenses).</li> <li><strong>Time Selection</strong>: Users can explore crime trends over different months.</li> <li><strong>Crime breakdown</strong>: A crime breakdown by category in the area selected below the map.</li> </ul> <p>Additionally, there are several things I plan to implement to improve the app:</p> <ul> <li><strong>Performance Optimisation</strong>: Fetching the data for many months from the API is slow. I already implemented caching and I have tried calling the API in parallel, but there is still some room for improvement. I plan to use a PostgreSQL database and fetch/store all the data from the API into the database so that the app interacts only with the database.</li> <li><strong>Advanced Analytics</strong>: I want to add crime trends and a predictive model to provide deeper insights into crime patterns. More importantly I want to use an LLM with RAG to make it simpler to make decisions and ask questions about the data.</li> <li><strong>Integrate with Additional Data Sources</strong>: I want to combine crime data with house prices, census data and flood risk to give a broader context for my purpose: buying a house.</li> <li><strong>Compare areas</strong>: Create an option to compare different areas side by side.</li> </ul> <h3 id="conclusions">Conclusions</h3> <p>In this blog post, I have shown that in this day and age, you do not need to wait for someone else to build an app to solve your problems. With the recent trend of open data and a bit of effort, you can create your own solution.</p> <p>If you’re interested in extending this project or have feedback, feel free to contribute on <a href="https://github.com/mariohevia/crime_data_uk">Github</a> or open an <a href="https://github.com/mariohevia/crime_data_uk/issues">issue</a>.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="Data-Visualisation"/><category term="Data-Analysis"/><category term="Geospatial"/><category term="API"/><category term="Web-App"/><summary type="html"><![CDATA[Using UK Police crime data, I built an interactive web app that allows users to visualize street-level crime data by clicking on the map or defining custom areas. This post covers data retrieval, processing and visualisation.]]></summary></entry><entry><title type="html">Predicting Bike Sharing Demand: A Step-by-Step Guide to Building a Regression Model</title><link href="https://mariohevia.github.io/blog/2025/weather-data-to-bike-sharing-demand/" rel="alternate" type="text/html" title="Predicting Bike Sharing Demand: A Step-by-Step Guide to Building a Regression Model"/><published>2025-02-24T00:00:00+00:00</published><updated>2025-02-24T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/weather-data-to-bike-sharing-demand</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/weather-data-to-bike-sharing-demand/"><![CDATA[<p>This project began as a short exercise for a job interview, but I wanted to expand on it in a more instructional way, explaining my thought process, the reasoning behind certain decisions, and how these steps can be applied to any classification or regression problem. Since the original dataset was provided as part of the interview, I’ll be using an open-source dataset instead for this blog post.</p> <p>As you can guess from the title, the dataset contains bike-sharing demand data. More specifically, it records the hourly count of rental bikes between 2011 and 2012 in the Capital Bikeshare system, along with corresponding weather and seasonal information. This dataset was introduced in the paper <a href="https://link.springer.com/article/10.1007/s13748-013-0040-3">Event labeling combining ensemble detectors and background knowledge</a> by Hadi Fanaee-T and João Gama in 2013.</p> <p>I consider it a great dataset for guiding you through the steps needed to analyse a dataset and build a regression model. If you want to follow along the blog you can download the <a href="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/bike-sharing.ipynb">Jupyter notebook</a>.</p> <h3 id="data-preparation">Data Preparation</h3> <p>Let’s begin by downloading the dataset and preparing the data. The dataset is hosted on Kaggle <a href="https://www.kaggle.com/datasets/lakshmi25npathi/bike-sharing-dataset/data">here</a>. To download it, you’ll first need to install the Kaggle API on your computer, generate an API key, and then run the following command in a terminal.</p> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kaggle datasets download -d lakshmi25npathi/bike-sharing-dataset
</code></pre></div></div> <p>Now, moving to Python, we can extract the dataset into a folder called <code class="language-plaintext highlighter-rouge">bike-sharing-dataset</code> and later load it into a Pandas DataFrame using:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">zipfile</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="k">with</span> <span class="n">zipfile</span><span class="p">.</span><span class="nc">ZipFile</span><span class="p">(</span><span class="sh">"</span><span class="s">bike-sharing-dataset.zip</span><span class="sh">"</span><span class="p">,</span> <span class="sh">'</span><span class="s">r</span><span class="sh">'</span><span class="p">)</span> <span class="k">as</span> <span class="n">zip_ref</span><span class="p">:</span>
    <span class="n">zip_ref</span><span class="p">.</span><span class="nf">extractall</span><span class="p">(</span><span class="sh">"</span><span class="s">bike-sharing-dataset</span><span class="sh">"</span><span class="p">)</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">read_csv</span><span class="p">(</span><span class="sh">"</span><span class="s">./bike-sharing-dataset/hour.csv</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>From the dataset information on <a href="https://www.kaggle.com/datasets/lakshmi25npathi/bike-sharing-dataset/data">Kaggle</a>, we can see that it includes three different counts we might want to predict: the number of casual users, registered users, or the total count.</p> <p>Now, we can inspect the data, check for missing values, and identify any inconsistencies across all variables.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nf">display</span><span class="p">(</span><span class="n">df</span><span class="p">.</span><span class="nf">info</span><span class="p">())</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RangeIndex: 17379 entries, 0 to 17378
Data columns (total 17 columns):
 #   Column      Non-Null Count  Dtype  
---  ------      --------------  -----  
 0   instant     17379 non-null  int64  
 1   dteday      17379 non-null  object 
 2   season      17379 non-null  int64  
 3   yr          17379 non-null  int64  
 4   mnth        17379 non-null  int64  
 5   hr          17379 non-null  int64  
 6   holiday     17379 non-null  int64  
 7   weekday     17379 non-null  int64  
 8   workingday  17379 non-null  int64  
 9   weathersit  17379 non-null  int64  
 10  temp        17379 non-null  float64
 11  atemp       17379 non-null  float64
 12  hum         17379 non-null  float64
 13  windspeed   17379 non-null  float64
 14  casual      17379 non-null  int64  
 15  registered  17379 non-null  int64  
 16  cnt         17379 non-null  int64  
dtypes: float64(4), int64(12), object(1)
memory usage: 2.3+ MB
</code></pre></div></div> <p>The first thing to notice is that the <code class="language-plaintext highlighter-rouge">dteday</code> column, which represents a date, is not automatically imported as a <code class="language-plaintext highlighter-rouge">datetime</code> type by Pandas. This isn’t particularly important in this dataset since other features already encode the date, but we’ll address it during the exploratory data analysis.</p> <p>Another key point is that there are no missing values, so we don’t need to apply imputation techniques or remove rows/columns due to excessive missing data.</p> <p>Now, we can examine the distribution of values in each column using <code class="language-python">df.describe()</code>.</p> <div style="overflow-x: auto;"> <style scoped="">.dataframe tbody tr th:only-of-type{vertical-align:middle}.dataframe tbody tr th{vertical-align:top}.dataframe thead th{text-align:right}</style> <table border="1" class="dataframe"> <thead> <tr style="text-align: right;"> <th></th> <th>instant</th> <th>season</th> <th>yr</th> <th>mnth</th> <th>hr</th> <th>holiday</th> <th>weekday</th> <th>workingday</th> <th>weathersit</th> <th>temp</th> <th>atemp</th> <th>hum</th> <th>windspeed</th> <th>casual</th> <th>registered</th> <th>cnt</th> </tr> </thead> <tbody> <tr> <th>count</th> <td>17379.0000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> <td>17379.000000</td> </tr> <tr> <th>mean</th> <td>8690.0000</td> <td>2.501640</td> <td>0.502561</td> <td>6.537775</td> <td>11.546752</td> <td>0.028770</td> <td>3.003683</td> <td>0.682721</td> <td>1.425283</td> <td>0.496987</td> <td>0.475775</td> <td>0.627229</td> <td>0.190098</td> <td>35.676218</td> <td>153.786869</td> <td>189.463088</td> </tr> <tr> <th>std</th> <td>5017.0295</td> <td>1.106918</td> <td>0.500008</td> <td>3.438776</td> <td>6.914405</td> <td>0.167165</td> <td>2.005771</td> <td>0.465431</td> <td>0.639357</td> <td>0.192556</td> <td>0.171850</td> <td>0.192930</td> <td>0.122340</td> <td>49.305030</td> <td>151.357286</td> <td>181.387599</td> </tr> <tr> <th>min</th> <td>1.0000</td> <td>1.000000</td> <td>0.000000</td> <td>1.000000</td> <td>0.000000</td> <td>0.000000</td> <td>0.000000</td> <td>0.000000</td> <td>1.000000</td> <td>0.020000</td> <td>0.000000</td> <td>0.000000</td> <td>0.000000</td> <td>0.000000</td> <td>0.000000</td> <td>1.000000</td> </tr> <tr> <th>25%</th> <td>4345.5000</td> <td>2.000000</td> <td>0.000000</td> <td>4.000000</td> <td>6.000000</td> <td>0.000000</td> <td>1.000000</td> <td>0.000000</td> <td>1.000000</td> <td>0.340000</td> <td>0.333300</td> <td>0.480000</td> <td>0.104500</td> <td>4.000000</td> <td>34.000000</td> <td>40.000000</td> </tr> <tr> <th>50%</th> <td>8690.0000</td> <td>3.000000</td> <td>1.000000</td> <td>7.000000</td> <td>12.000000</td> <td>0.000000</td> <td>3.000000</td> <td>1.000000</td> <td>1.000000</td> <td>0.500000</td> <td>0.484800</td> <td>0.630000</td> <td>0.194000</td> <td>17.000000</td> <td>115.000000</td> <td>142.000000</td> </tr> <tr> <th>75%</th> <td>13034.5000</td> <td>3.000000</td> <td>1.000000</td> <td>10.000000</td> <td>18.000000</td> <td>0.000000</td> <td>5.000000</td> <td>1.000000</td> <td>2.000000</td> <td>0.660000</td> <td>0.621200</td> <td>0.780000</td> <td>0.253700</td> <td>48.000000</td> <td>220.000000</td> <td>281.000000</td> </tr> <tr> <th>max</th> <td>17379.0000</td> <td>4.000000</td> <td>1.000000</td> <td>12.000000</td> <td>23.000000</td> <td>1.000000</td> <td>6.000000</td> <td>1.000000</td> <td>4.000000</td> <td>1.000000</td> <td>1.000000</td> <td>1.000000</td> <td>0.850700</td> <td>367.000000</td> <td>886.000000</td> <td>977.000000</td> </tr> </tbody> </table> </div> <p>From this, we can see that the features in the dataset are already preprocessed. The columns <code class="language-plaintext highlighter-rouge">temp</code>, <code class="language-plaintext highlighter-rouge">atemp</code>, <code class="language-plaintext highlighter-rouge">hum</code>, and <code class="language-plaintext highlighter-rouge">windspeed</code> are scaled between 0 and 1, while all other columns are ordinally encoded. This preprocessing will be beneficial during feature engineering.</p> <h3 id="data-splitting">Data Splitting</h3> <p>Since the data is time-based, we’ll use the first year and a half for training and the last six months for testing. This approach mimics a real-world scenario where historical data is used to predict future outcomes.</p> <p>Additionally, we use the <code class="language-plaintext highlighter-rouge">copy()</code> method to create a deep copy of the original DataFrame, preventing unintended modifications that could affect the original data.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">yr</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">|</span> <span class="p">((</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">yr</span><span class="sh">'</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="sh">'</span><span class="s">mnth</span><span class="sh">'</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">6</span><span class="p">))].</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">test_df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="o">~</span><span class="n">df</span><span class="p">.</span><span class="n">index</span><span class="p">.</span><span class="nf">isin</span><span class="p">(</span><span class="n">train_df</span><span class="p">.</span><span class="n">index</span><span class="p">)].</span><span class="nf">copy</span><span class="p">()</span>
</code></pre></div></div> <p>As mentioned earlier, the dataset has three possible target variables. For this blog post, we will focus solely on predicting the total number of users. Therefore, we drop the <code class="language-plaintext highlighter-rouge">casual</code> and <code class="language-plaintext highlighter-rouge">registered</code> columns and set <code class="language-plaintext highlighter-rouge">cnt</code> as our label.</p> <p>Once again, note the use of <code class="language-plaintext highlighter-rouge">copy()</code> to ensure we create a deep copy and avoid unintended modifications to the original DataFrame.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">cnt</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">casual</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">registered</span><span class="sh">"</span><span class="p">]).</span><span class="nf">copy</span><span class="p">(),</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">"</span><span class="s">cnt</span><span class="sh">"</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="n">test_df</span><span class="p">.</span><span class="nf">drop</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="sh">"</span><span class="s">cnt</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">casual</span><span class="sh">"</span><span class="p">,</span><span class="sh">"</span><span class="s">registered</span><span class="sh">"</span><span class="p">]).</span><span class="nf">copy</span><span class="p">(),</span> <span class="n">test_df</span><span class="p">[</span><span class="sh">"</span><span class="s">cnt</span><span class="sh">"</span><span class="p">].</span><span class="nf">copy</span><span class="p">()</span>
</code></pre></div></div> <h3 id="exploratory-data-analysis">Exploratory Data Analysis</h3> <p>The first step I like to take in an exploratory data analysis before training a model is examining the correlation matrix; a table that displays the correlation coefficients between variables, indicating the strength and direction of their relationships.</p> <p>Here, we plot a heatmap of the correlation matrix. From this, we can already see that the most useful features are likely to be <code class="language-plaintext highlighter-rouge">temp</code>, <code class="language-plaintext highlighter-rouge">atemp</code>, <code class="language-plaintext highlighter-rouge">hr</code>, and <code class="language-plaintext highlighter-rouge">hum</code>, as they all show a correlation with the target variable.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">train_df</span><span class="p">.</span><span class="nf">corr</span><span class="p">(</span><span class="n">numeric_only</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">YlGnBu</span><span class="sh">"</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_22_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p><strong>Note:</strong> We are using only the training data in this analysis to ensure that our decisions are based solely on the training set, preventing any unintended “leakage” into the final testing phase. If you are conducting an exploratory data analysis without planning to train a model later, this step would not be necessary.</p> <p>Since the data represents bike rentals, we can plot all variables against the date to identify any patterns or seasonal trends throughout the year.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nf">to_datetime</span><span class="p">(</span><span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">dteday</span><span class="sh">'</span><span class="p">])</span>
<span class="n">train_df</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">subplots</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">"</span><span class="s">date</span><span class="sh">"</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">12</span><span class="p">,</span> <span class="mi">8</span><span class="p">))</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_24_0.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>We can observe some seasonality in the number of users, which is most likely influenced by the temperature.</p> <p>Another expected factor is that the time of day affects the number of bike rentals, so let’s plot that as well.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sns</span><span class="p">.</span><span class="nf">boxplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">train_df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">hr</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_26_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>We can observe peaks in usage during commuting hours (7-8 AM and 5-7 PM), with many outliers during other hours, which could potentially affect the performance of the models.</p> <p>Another interesting aspect to explore is the daily change in bike rentals.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">daily_data</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">.</span><span class="nf">groupby</span><span class="p">(</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">).</span><span class="nf">agg</span><span class="p">({</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">:</span> <span class="sh">'</span><span class="s">sum</span><span class="sh">'</span><span class="p">}).</span><span class="nf">reset_index</span><span class="p">()</span>
<span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">].</span><span class="nf">diff</span><span class="p">()</span>
<span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">threshold</span> <span class="o">=</span> <span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span>  <span class="c1"># Threshold: 2 * standard deviation
</span><span class="n">anomalies</span> <span class="o">=</span> <span class="n">daily_data</span><span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">daily_data</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">lineplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">daily_data</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Daily Change</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">anomalies</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">],</span> <span class="n">anomalies</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly</span><span class="sh">'</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="n">threshold</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Positive Threshold</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="o">-</span><span class="n">threshold</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Negative Threshold</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_28_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>This suggests that we could potentially use data from the previous day to improve predictions for the following day. Let’s explore that possibility.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">]</span> <span class="o">-</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">threshold</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">].</span><span class="nf">std</span><span class="p">()</span> <span class="o">*</span> <span class="mi">2</span>  <span class="c1"># Threshold: 2 * standard deviation
</span><span class="n">anomalies</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="nf">abs</span><span class="p">(</span><span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">])</span> <span class="o">&gt;</span> <span class="n">threshold</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">subplots</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">7</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">lineplot</span><span class="p">(</span><span class="n">data</span><span class="o">=</span><span class="n">train_df</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Daily Change</span><span class="sh">'</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">green</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">anomalies</span><span class="p">[</span><span class="sh">'</span><span class="s">date</span><span class="sh">'</span><span class="p">],</span> <span class="n">anomalies</span><span class="p">[</span><span class="sh">'</span><span class="s">change</span><span class="sh">'</span><span class="p">],</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Anomaly</span><span class="sh">'</span><span class="p">,</span> <span class="n">s</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="n">threshold</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Positive Threshold</span><span class="sh">'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="nf">axhline</span><span class="p">(</span><span class="o">-</span><span class="n">threshold</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="sh">'</span><span class="s">red</span><span class="sh">'</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="sh">'</span><span class="s">--</span><span class="sh">'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="sh">'</span><span class="s">Negative Threshold</span><span class="sh">'</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Total number of data points:</span><span class="sh">"</span><span class="p">,</span> <span class="n">train_df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Number of anomalies:</span><span class="sh">"</span><span class="p">,</span> <span class="n">anomalies</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Percentage of anomalies: </span><span class="si">{</span><span class="mi">100</span><span class="o">*</span><span class="n">anomalies</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="n">train_df</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="s">%</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Total number of data points: 13003
Number of anomalies: 860
Percentage of anomalies: 6.61%
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_30_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>From this plot, we can see that there are significantly more outliers compared to the daily count, though the percentage of anomalies remains relatively small. However, if we replot the correlation matrix, we can observe that these engineered feature could still provide valuable insights.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt</span><span class="sh">'</span><span class="p">].</span><span class="nf">shift</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">train_df</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="nf">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span> <span class="mi">9</span><span class="p">))</span>
<span class="n">sns</span><span class="p">.</span><span class="nf">heatmap</span><span class="p">(</span><span class="n">train_df</span><span class="p">.</span><span class="nf">corr</span><span class="p">(</span><span class="n">numeric_only</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span> <span class="n">cmap</span><span class="o">=</span><span class="sh">"</span><span class="s">YlGnBu</span><span class="sh">"</span><span class="p">,</span> <span class="n">annot</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_32_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <h3 id="feature-engineering">Feature Engineering</h3> <p>From the data analysis, we observed that the count from the previous day could be useful, so we will add that first.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_train_transformed</span> <span class="o">=</span> <span class="n">X_train</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">X_train_transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y_train</span><span class="p">.</span><span class="nf">shift</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="n">X_train_transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X_train_transformed</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
</code></pre></div></div> <p>As mentioned earlier, the features in this dataset have already undergone some preprocessing. For instance, <code class="language-plaintext highlighter-rouge">temp</code>, <code class="language-plaintext highlighter-rouge">atemp</code>, <code class="language-plaintext highlighter-rouge">hum</code>, and <code class="language-plaintext highlighter-rouge">windspeed</code> are scaled between 0 and 1, the remaining features are ordinally encoded, and there are no missing values. The only modifications we might consider are using one-hot encoding instead of ordinal encoding, or testing a decomposition technique like Principal Component Analysis (PCA). I’ve created three DataFrames to evaluate which encoding method works best and whether PCA proves useful. I won’t show the code here, as it’s a bit more involved, but you can find it in the <a href="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/bike-sharing.ipynb">Jupyter notebook</a>.</p> <h3 id="model-selection">Model Selection</h3> <p>Here, we test several algorithms with different parameter settings using grid search. The grid search explores a range of parameter values, though the selected parameters are not highly optimised.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">models</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">Random Forest</span><span class="sh">"</span><span class="p">:</span> <span class="nc">RandomForestRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
    <span class="sh">"</span><span class="s">Hist Gradient Boosting</span><span class="sh">"</span><span class="p">:</span> <span class="nc">HistGradientBoostingRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">early_stopping</span><span class="o">=</span><span class="bp">False</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">ElasticNet</span><span class="sh">'</span><span class="p">:</span> <span class="nc">ElasticNet</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span>
    <span class="sh">'</span><span class="s">xgb</span><span class="sh">'</span><span class="p">:</span> <span class="n">xgb</span><span class="p">.</span><span class="nc">XGBRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="p">}</span>

<span class="n">param_grids</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">Random Forest</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">n_estimators</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]},</span>
    <span class="sh">"</span><span class="s">Hist Gradient Boosting</span><span class="sh">"</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">max_iter</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">,</span> <span class="mi">300</span><span class="p">]},</span>
    <span class="sh">'</span><span class="s">ElasticNet</span><span class="sh">'</span><span class="p">:</span> <span class="p">{</span><span class="sh">"</span><span class="s">alpha</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span> <span class="sh">"</span><span class="s">l1_ratio</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.2</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">,</span> <span class="mf">0.8</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">]},</span> <span class="c1"># l1_ratio == 1.0 is equivalent to Lasso
</span>    <span class="sh">'</span><span class="s">xgb</span><span class="sh">'</span><span class="p">:{</span><span class="sh">"</span><span class="s">n_estimators</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">50</span><span class="p">,</span> <span class="mi">100</span><span class="p">]}</span>
<span class="p">}</span>

<span class="n">cv</span> <span class="o">=</span> <span class="nc">KFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="k">for</span> <span class="n">X_transformed</span> <span class="ow">in</span> <span class="p">[</span><span class="n">X_transformed_1</span><span class="p">,</span><span class="n">X_transformed_2</span><span class="p">,</span><span class="n">X_transformed_3</span><span class="p">]:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">============</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">model</span> <span class="ow">in</span> <span class="n">models</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
        <span class="n">grid_search</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span>
            <span class="n">estimator</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">param_grid</span><span class="o">=</span><span class="n">param_grids</span><span class="p">[</span><span class="n">name</span><span class="p">],</span>
            <span class="n">return_train_score</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">cv</span><span class="o">=</span><span class="n">cv</span><span class="p">,</span>
            <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
        <span class="p">).</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_transformed</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
        <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_params_</span><span class="p">,</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_score_</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>============ One Hot Encoder
Random Forest {'n_estimators': 100} 0.7237796612387587
Hist Gradient Boosting {'max_iter': 50} 0.7663063586806613
ElasticNet {'alpha': 0.01, 'l1_ratio': 0.2} 0.689208549248405
xgb {'n_estimators': 20} 0.729716345667839
============ Ordinal Encoder
Random Forest {'n_estimators': 20} 0.7380497136926296
Hist Gradient Boosting {'max_iter': 50} 0.7970622263403604
ElasticNet {'alpha': 0.1, 'l1_ratio': 0.8} 0.6327096252754385
xgb {'n_estimators': 20} 0.7482473403215408
============ PCA
Random Forest {'n_estimators': 100} 0.5839788307210804
Hist Gradient Boosting {'max_iter': 50} 0.6267378200940041
ElasticNet {'alpha': 1, 'l1_ratio': 1.0} 0.6129175015796107
xgb {'n_estimators': 20} 0.6011636257171631
</code></pre></div></div> <p>From this comparison, we can see that the ensemble models perform better with ordinal encoding, while the linear model works better with one-hot encoding. Overall, the best-performing models are HistGradientBoosting and XGBoost.</p> <p>One thing I like to do is combine the best models using a voting ensemble. In my experience, this approach tends to be more beneficial for classification tasks, but it can also provide improvements for regression.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">reg1</span> <span class="o">=</span> <span class="nc">HistGradientBoostingRegressor</span><span class="p">(</span><span class="n">early_stopping</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">max_iter</span><span class="o">=</span><span class="mi">50</span><span class="p">)</span>
<span class="n">reg2</span> <span class="o">=</span> <span class="n">xgb</span><span class="p">.</span><span class="nc">XGBRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
<span class="n">v_reg</span> <span class="o">=</span> <span class="nc">VotingRegressor</span><span class="p">(</span><span class="n">estimators</span><span class="o">=</span><span class="p">[(</span><span class="sh">'</span><span class="s">hgb</span><span class="sh">'</span><span class="p">,</span> <span class="n">reg1</span><span class="p">),</span> <span class="p">(</span><span class="sh">'</span><span class="s">rf</span><span class="sh">'</span><span class="p">,</span> <span class="n">reg2</span><span class="p">)])</span>
<span class="nf">float</span><span class="p">(</span><span class="nf">cross_val_score</span><span class="p">(</span><span class="n">v_reg</span><span class="p">,</span> <span class="n">X_transformed_2</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">cv</span><span class="o">=</span><span class="n">cv</span><span class="p">,</span> <span class="n">scoring</span><span class="o">=</span><span class="sh">'</span><span class="s">r2</span><span class="sh">'</span><span class="p">).</span><span class="nf">mean</span><span class="p">())</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0.7723058174761523
</code></pre></div></div> <p>This time, there was no noticeable improvement; therefore, we will proceed with the <code class="language-plaintext highlighter-rouge">HistGradientBoostingRegressor</code> moving forward.</p> <h3 id="model-training">Model Training</h3> <p>Now that we’ve selected the model, we can perform hyperparameter tuning to further improve its performance. We only test two values per parameter, as the number of tests conducted by the grid search increases exponentially with the number of parameters.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">model</span> <span class="o">=</span> <span class="nc">HistGradientBoostingRegressor</span><span class="p">(</span>
        <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">early_stopping</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">param_grid</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">learning_rate</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.1</span><span class="p">],</span>  <span class="c1"># Lower values for more stable learning
</span>    <span class="sh">"</span><span class="s">max_iter</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">100</span><span class="p">,</span> <span class="mi">200</span><span class="p">],</span>  <span class="c1"># Number of boosting iterations
</span>    <span class="sh">"</span><span class="s">max_leaf_nodes</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">31</span><span class="p">],</span>  <span class="c1"># Controls tree complexity
</span>    <span class="sh">"</span><span class="s">min_samples_leaf</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">],</span>  <span class="c1"># Minimum samples per leaf
</span>    <span class="sh">"</span><span class="s">l2_regularization</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mf">0.5</span><span class="p">],</span>  <span class="c1"># Regularization strength
</span>    <span class="sh">"</span><span class="s">max_depth</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="bp">None</span><span class="p">,</span> <span class="mi">5</span><span class="p">],</span>  <span class="c1"># Depth of each tree (None means unlimited)
</span>    <span class="sh">"</span><span class="s">loss</span><span class="sh">"</span><span class="p">:</span> <span class="p">[</span><span class="sh">"</span><span class="s">squared_error</span><span class="sh">"</span><span class="p">,</span> <span class="sh">"</span><span class="s">absolute_error</span><span class="sh">"</span><span class="p">],</span>  <span class="c1"># Loss function (MSE or MAE)
</span><span class="p">}</span>
<span class="n">cv</span> <span class="o">=</span> <span class="nc">KFold</span><span class="p">(</span><span class="n">n_splits</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">shuffle</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="n">grid_search</span> <span class="o">=</span> <span class="nc">GridSearchCV</span><span class="p">(</span>
            <span class="n">estimator</span><span class="o">=</span><span class="n">model</span><span class="p">,</span>
            <span class="n">param_grid</span><span class="o">=</span><span class="n">param_grid</span><span class="p">,</span>
            <span class="n">return_train_score</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span>
            <span class="n">cv</span><span class="o">=</span><span class="n">cv</span><span class="p">,</span>
            <span class="n">n_jobs</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span>
        <span class="p">).</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_transformed_2</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="n">grid_search</span><span class="p">.</span><span class="n">best_params_</span><span class="p">,</span> <span class="n">grid_search</span><span class="p">.</span><span class="n">best_score_</span><span class="p">)</span>

<span class="n">final_pipeline</span> <span class="o">=</span> <span class="n">preprocessing_pipeline_2</span>
<span class="n">final_model</span> <span class="o">=</span> <span class="nc">HistGradientBoostingRegressor</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span> <span class="n">early_stopping</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="o">**</span><span class="n">grid_search</span><span class="p">.</span><span class="n">best_params_</span><span class="p">)</span>
<span class="n">final_model</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_transformed_2</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
</code></pre></div></div> <p>After obtaining the best parameters, we can train the model using all available training data and are now ready to evaluate its performance.</p> <h3 id="model-evaluation">Model Evaluation</h3> <p>Before using the testing data, we want to evaluate the model on the training data. We would expect good performance, as the model has seen all the data points, but we wouldn’t want perfect scores, as this would indicate overfitting. Additionally, we can plot the actual versus predicted counts to visually assess the model’s accuracy.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">train_predictions</span> <span class="o">=</span> <span class="n">final_model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_transformed_2</span><span class="p">)</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">train_predictions</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>

<span class="n">mae</span> <span class="o">=</span> <span class="nf">mean_absolute_error</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">train_predictions</span><span class="p">)</span>
<span class="n">mse</span> <span class="o">=</span> <span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">train_predictions</span><span class="p">)</span>
<span class="n">r2</span> <span class="o">=</span> <span class="nf">r2_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">train_predictions</span><span class="p">)</span>
<span class="n">mape</span> <span class="o">=</span> <span class="nf">mean_absolute_percentage_error</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">train_predictions</span><span class="p">)</span>
<span class="n">explained_variance</span> <span class="o">=</span> <span class="nf">explained_variance_score</span><span class="p">(</span><span class="n">y_train</span><span class="p">,</span> <span class="n">train_predictions</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Absolute Error (MAE): </span><span class="si">{</span><span class="n">mae</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Squared Error (MSE): </span><span class="si">{</span><span class="n">mse</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">R-squared (R²): </span><span class="si">{</span><span class="n">r2</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Absolute Percentage Error (MAPE): </span><span class="si">{</span><span class="n">mape</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Explained Variance Score: </span><span class="si">{</span><span class="n">explained_variance</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean Absolute Error (MAE): 23.31
Mean Squared Error (MSE): 1688.57
R-squared (R²): 0.93
Mean Absolute Percentage Error (MAPE): 0.32
Explained Variance Score: 0.93
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_46_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>Another way to visualise the predictions versus the actual data is by comparing each data point for each instant.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="sh">"</span><span class="s">instant</span><span class="sh">"</span><span class="p">],</span> <span class="n">y_train</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_train</span><span class="p">[</span><span class="sh">"</span><span class="s">instant</span><span class="sh">"</span><span class="p">],</span> <span class="n">train_predictions</span><span class="p">)</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_48_0.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>From the last plot, we can see that the model tends to underestimate values towards the end, predicting lower than the actual values. This may suggest that the number of users is increasing over time, and the model is not capturing this trend effectively, even in the training data.</p> <p>Next, we evaluate the model using the test data. As expected, the plot and metrics show that the predictions are not as accurate as on the training data, but the results are still reasonably good.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">X_test_transform</span> <span class="o">=</span> <span class="n">X_test</span><span class="p">.</span><span class="nf">copy</span><span class="p">()</span>
<span class="n">X_test_transform</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">y_test</span><span class="p">.</span><span class="nf">shift</span><span class="p">(</span><span class="mi">24</span><span class="p">)</span>
<span class="n">X_test_transform</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">]</span> <span class="o">=</span> <span class="n">X_test_transform</span><span class="p">[</span><span class="sh">'</span><span class="s">cnt_prev_day</span><span class="sh">'</span><span class="p">].</span><span class="nf">fillna</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
<span class="n">X_test_transform</span> <span class="o">=</span> <span class="n">final_pipeline</span><span class="p">.</span><span class="nf">fit_transform</span><span class="p">(</span><span class="n">X_test_transform</span><span class="p">)</span>

<span class="n">predictions</span> <span class="o">=</span> <span class="n">final_model</span><span class="p">.</span><span class="nf">predict</span><span class="p">(</span><span class="n">X_test_transform</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">scatter</span><span class="p">(</span><span class="n">predictions</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>

<span class="n">mae</span> <span class="o">=</span> <span class="nf">mean_absolute_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
<span class="n">mse</span> <span class="o">=</span> <span class="nf">mean_squared_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
<span class="n">r2</span> <span class="o">=</span> <span class="nf">r2_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
<span class="n">mape</span> <span class="o">=</span> <span class="nf">mean_absolute_percentage_error</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>
<span class="n">explained_variance</span> <span class="o">=</span> <span class="nf">explained_variance_score</span><span class="p">(</span><span class="n">y_test</span><span class="p">,</span> <span class="n">predictions</span><span class="p">)</span>

<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Absolute Error (MAE): </span><span class="si">{</span><span class="n">mae</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Squared Error (MSE): </span><span class="si">{</span><span class="n">mse</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">R-squared (R²): </span><span class="si">{</span><span class="n">r2</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Mean Absolute Percentage Error (MAPE): </span><span class="si">{</span><span class="n">mape</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
<span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Explained Variance Score: </span><span class="si">{</span><span class="n">explained_variance</span><span class="si">:</span><span class="p">.</span><span class="mi">2</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Mean Absolute Error (MAE): 51.24
Mean Squared Error (MSE): 6882.47
R-squared (R²): 0.86
Mean Absolute Percentage Error (MAPE): 0.41
Explained Variance Score: 0.87
</code></pre></div></div> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-24-weather-data-to-bike-sharing-demand/output_53_1.png" alt="Correlation matrix" style="max-width: 100%; height: auto;"/></p> <p>When plotting over time, we can observe what we discussed earlier: the model is underestimating values, likely because the number of users has increased over time. Since the model didn’t have access to future data, it couldn’t account for this trend.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="sh">"</span><span class="s">instant</span><span class="sh">"</span><span class="p">],</span> <span class="n">y_test</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="nf">plot</span><span class="p">(</span><span class="n">X_test</span><span class="p">[</span><span class="sh">"</span><span class="s">instant</span><span class="sh">"</span><span class="p">],</span> <span class="n">predictions</span><span class="p">)</span>
<span class="n">_</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="nf">xticks</span><span class="p">(</span><span class="n">rotation</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
</code></pre></div></div> <h3 id="model-interpretation">Model Interpretation</h3> <p>In this code, we use the permutation importance method to assess the significance of each feature in the trained model. The <code class="language-plaintext highlighter-rouge">permutation_importance</code> function computes the importance of each feature by randomly shuffling its values and evaluating the change in model performance. The output shows the mean importance scores and their associated standard deviations for each feature. Features with a significant impact on the model, such as <code class="language-plaintext highlighter-rouge">hr</code> and <code class="language-plaintext highlighter-rouge">cnt_prev_day</code>, are highlighted, while those with little effect, like <code class="language-plaintext highlighter-rouge">holiday</code>, have near-zero importance. This helps us understand which features are driving the model’s predictions.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">r</span> <span class="o">=</span> <span class="nf">permutation_importance</span><span class="p">(</span><span class="n">final_model</span><span class="p">,</span> <span class="n">X_transformed_2</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span>
                           <span class="n">n_repeats</span><span class="o">=</span><span class="mi">30</span><span class="p">,</span>
                           <span class="n">random_state</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>


<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">r</span><span class="p">.</span><span class="n">importances_mean</span><span class="p">.</span><span class="nf">argsort</span><span class="p">()[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]:</span>
    <span class="k">if</span> <span class="n">r</span><span class="p">.</span><span class="n">importances_mean</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">r</span><span class="p">.</span><span class="n">importances_std</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">X_transformed_2</span><span class="p">.</span><span class="n">columns</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">:</span><span class="o">&lt;</span><span class="mi">8</span><span class="si">}</span><span class="se">\t</span><span class="sh">"</span>
              <span class="sa">f</span><span class="sh">"</span><span class="si">{</span><span class="n">r</span><span class="p">.</span><span class="n">importances_mean</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span>
              <span class="sa">f</span><span class="sh">"</span><span class="s"> +/- </span><span class="si">{</span><span class="n">r</span><span class="p">.</span><span class="n">importances_std</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="si">:</span><span class="p">.</span><span class="mi">3</span><span class="n">f</span><span class="si">}</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>hr      	    0.491 +/- 0.007
cnt_prev_day	    0.429 +/- 0.006
workingday	    0.091 +/- 0.002
weekday 	    0.074 +/- 0.002
instant 	    0.071 +/- 0.002
weathersit	    0.038 +/- 0.001
hum     	    0.033 +/- 0.001
temp    	    0.030 +/- 0.001
atemp   	    0.015 +/- 0.001
windspeed	    0.002 +/- 0.000
season  	    0.002 +/- 0.000
mnth    	    0.001 +/- 0.000
holiday 	    0.000 +/- 0.000
</code></pre></div></div> <h3 id="other-things-to-consider">Other things to consider</h3> <p><strong>Error Analysis</strong><br/> It’s essential to investigate where the model performed poorly in order to identify areas for improvement. By focusing on these weak spots, we can refine the model and enhance its overall performance.</p> <p><strong>Consider the Increasing Trend of Users Over Time</strong><br/> The increasing trend in user numbers over time may not be captured by the model, leading to underestimations, especially in later periods. Recognising this pattern can help in adjusting the model to better account for time-dependent factors.</p> <p><strong>Outliers</strong><br/> Outliers can significantly affect the model’s predictions. It’s important to identify and understand them, as they may reveal underlying patterns or issues in the data that need addressing.</p> <p><strong>Reiterate</strong><br/> After evaluating the model, make necessary adjustments to features, model parameters, or even consider trying a different model type. However, always be cautious not to overfit to the testing data by performing too many iterations. A separate validation set, which should only be used once, can help prevent overfitting.</p> <p><strong>CI/CD Stage</strong><br/> In the CI/CD stage, the focus shifts to deploying the model and ensuring it is continually monitored for performance. Monitoring is key to maintaining model accuracy and catching any potential issues that may arise over time.</p> <h3 id="conclusions">Conclusions</h3> <p>In this blog post, we explored the process of building a regression model to predict bike-sharing demand. Through data preprocessing, feature engineering, and model selection, we developed a robust model that provides valuable insights. While the model performs well overall, there are areas for improvement, such as accounting for the increasing trend of users over time.</p> <p>I hope this blog post has been useful to you in understanding the process of building and evaluating a regression model, and that you can apply these techniques to your own projects. If you have any feedback or suggestions for improvement, feel free to reach out via <a href="mailto:mario_hevia@hotmail.com">email</a> or <a href="https://www.linkedin.com/in/mario-hevia/">LinkedIn</a>.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="Machine-Learning"/><category term="Regression"/><category term="Data-Preprocessing"/><category term="Feature-Selection"/><category term="Model-Evaluation"/><category term="Data-Analysis"/><summary type="html"><![CDATA[Using 2 years of weather and bike-sharing data, I built a machine learning model to predict the number of bike rentals in any given hour. This post covers the exploratory data analysis, data preprocessing, feature selection, and model evaluation.]]></summary></entry><entry><title type="html">When Not to Use Neural Networks</title><link href="https://mariohevia.github.io/blog/2025/when-not-to-use-neural-networks/" rel="alternate" type="text/html" title="When Not to Use Neural Networks"/><published>2025-02-15T00:00:00+00:00</published><updated>2025-02-15T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/when-not-to-use-neural-networks</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/when-not-to-use-neural-networks/"><![CDATA[<p>Neural networks (NNs) are a hot topic nowadays, mainly because they are one of the best options for computer vision, natural language processing, reinforcement learning, and, more recently, with new LLMs coming out every other day. However, in many cases, it is better to use a different ML algorithm. In this post, I’ll share a few examples where NNs are not the best choice, highlighting situations where other ML models can deliver better results.</p> <h3 id="when-simplicity-wins">When Simplicity Wins</h3> <p>Neural networks are good at modelling complex, non-linear relationships. However, this strength can turn into a weakness when:</p> <ul> <li>The dataset is small, which makes NNs more likely to overfit.</li> <li>The data is high-dimensional, with many non-informative features, and the NNs have to learn which features are relevant, which is difficult.</li> <li>Interpretability is important, as NNs are often considered black boxes.</li> </ul> <p>Let’s go through some experiments to show these scenarios.</p> <h3 id="example-1-small-datasets">Example 1: Small Datasets</h3> <p>On small datasets, NNs can easily overfit to the training data. Other algorithms may capture the underlying patterns more effectively, allowing them to generalise better.</p> <p>In the example below, I compare a neural network with a Gaussian Process classifier (GP) and a Support Vector Machine (SVM). To emphasise the difference, I limit the training set to just 50 data points. The tests are repeated 100 times to ensure that what we are seeing is not just luck.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scores_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">SVM</span><span class="sh">"</span><span class="p">:[],</span>
    <span class="sh">"</span><span class="s">Gaussian Process</span><span class="sh">"</span><span class="p">:[],</span>
    <span class="sh">"</span><span class="s">Neural Network</span><span class="sh">"</span><span class="p">:[]</span>
<span class="p">}</span>
<span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">100</span><span class="p">):</span>
    <span class="c1"># Synthetic dataset
</span>    <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">make_moons</span><span class="p">(</span><span class="n">n_samples</span><span class="o">=</span><span class="mi">1000</span> <span class="p">,</span><span class="n">noise</span><span class="o">=</span><span class="mf">0.9</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.95</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    
    <span class="c1"># Classifiers to compare
</span>    <span class="n">svm</span> <span class="o">=</span> <span class="nc">SVC</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">gp</span> <span class="o">=</span> <span class="nc">GaussianProcessClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">nn</span> <span class="o">=</span> <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">max_iter</span><span class="o">=</span><span class="mi">10000</span><span class="p">,</span><span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    
    <span class="n">classifiers</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">SVM</span><span class="sh">"</span><span class="p">,</span> <span class="n">svm</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">Gaussian Process</span><span class="sh">"</span><span class="p">,</span> <span class="n">gp</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">Neural Network</span><span class="sh">"</span><span class="p">,</span><span class="n">nn</span><span class="p">)]</span>

    <span class="c1"># Fitting and scoring the classifiers
</span>    <span class="n">last_models</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">clf</span> <span class="ow">in</span> <span class="n">classifiers</span><span class="p">:</span>
        <span class="n">clf</span> <span class="o">=</span> <span class="nf">make_pipeline</span><span class="p">(</span><span class="nc">StandardScaler</span><span class="p">(),</span> <span class="n">clf</span><span class="p">)</span>
        <span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
        <span class="n">score</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
        <span class="n">scores_dict</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
        <span class="n">last_models</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">name</span><span class="p">,</span><span class="n">clf</span><span class="p">))</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">scores</span> <span class="ow">in</span> <span class="n">scores_dict</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">scores</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SVM
0.688778947368421
Gaussian Process
0.6964105263157895
Neural Network
0.6592210526315789
</code></pre></div></div> <p>From the results, we can see that, on average, it is better to use the SVM or GP. The reason becomes clearer when we plot the decision boundary of each algorithm against the data.</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/2025-02-15-when-not-to-use-neural-networks/small_data.png" alt="Comparison with small data"/></p> <p>The plots show that the neural network (right) is overfitting, while the other models (SVM on the left, GP in the centre) generalise better to the overall distribution.</p> <h3 id="example-2-high-dimensional-data">Example 2: High-dimensional data</h3> <p>Another place where NNs often struggle is with high-dimensional structured data that has only a small proportion of informative features. This is challenging because NNs rely on large amounts of data to learn meaningful patterns, and when most features are irrelevant, they can easily learn noise instead. Unlike models like decision trees or Lasso regression, which can automatically ignore unimportant features, NNs tend to spread weight across all inputs, making them less efficient in such cases.</p> <p>In the following example, I compare XGBoost, a tree-based algorithm, against a neural network. As before, the tests are run 100 times with different random seeds to ensure reliable results.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">scores_dict</span> <span class="o">=</span> <span class="p">{</span>
    <span class="sh">"</span><span class="s">XGBoost</span><span class="sh">"</span><span class="p">:[],</span>
    <span class="sh">"</span><span class="s">Neural Network</span><span class="sh">"</span><span class="p">:[]</span>
<span class="p">}</span>
<span class="k">for</span> <span class="n">seed</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">10</span><span class="p">):</span>
    <span class="c1"># Synthetic dataset
</span>    <span class="n">X</span><span class="p">,</span> <span class="n">y</span> <span class="o">=</span> <span class="nf">make_classification</span><span class="p">(</span><span class="n">n_samples</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">n_features</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="n">n_informative</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">n_redundant</span><span class="o">=</span><span class="mi">15</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">X_train</span><span class="p">,</span> <span class="n">X_test</span><span class="p">,</span> <span class="n">y_train</span><span class="p">,</span> <span class="n">y_test</span> <span class="o">=</span> <span class="nf">train_test_split</span><span class="p">(</span><span class="n">X</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">test_size</span><span class="o">=</span><span class="mf">0.4</span><span class="p">,</span> <span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>

    <span class="c1"># Classifiers to compare
</span>    <span class="n">nn</span> <span class="o">=</span> <span class="nc">MLPClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>
    <span class="n">xgboost</span> <span class="o">=</span> <span class="n">xgb</span><span class="p">.</span><span class="nc">XGBClassifier</span><span class="p">(</span><span class="n">random_state</span><span class="o">=</span><span class="n">seed</span><span class="p">)</span>

    <span class="n">classifiers</span> <span class="o">=</span> <span class="p">[</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">XGBoost</span><span class="sh">"</span><span class="p">,</span> <span class="n">xgboost</span><span class="p">),</span>
        <span class="p">(</span><span class="sh">"</span><span class="s">Neural Network</span><span class="sh">"</span><span class="p">,</span><span class="n">nn</span><span class="p">)]</span>

    <span class="c1"># Fitting and scoring the classifiers
</span>    <span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">clf</span> <span class="ow">in</span> <span class="n">classifiers</span><span class="p">:</span>
        <span class="n">clf</span> <span class="o">=</span> <span class="nf">make_pipeline</span><span class="p">(</span><span class="nc">StandardScaler</span><span class="p">(),</span> <span class="n">clf</span><span class="p">)</span>
        <span class="n">clf</span><span class="p">.</span><span class="nf">fit</span><span class="p">(</span><span class="n">X_train</span><span class="p">,</span> <span class="n">y_train</span><span class="p">)</span>
        <span class="n">score</span> <span class="o">=</span> <span class="n">clf</span><span class="p">.</span><span class="nf">score</span><span class="p">(</span><span class="n">X_test</span><span class="p">,</span> <span class="n">y_test</span><span class="p">)</span>
        <span class="n">scores_dict</span><span class="p">[</span><span class="n">name</span><span class="p">].</span><span class="nf">append</span><span class="p">(</span><span class="n">score</span><span class="p">)</span>
<span class="k">for</span> <span class="n">name</span><span class="p">,</span> <span class="n">scores</span> <span class="ow">in</span> <span class="n">scores_dict</span><span class="p">.</span><span class="nf">items</span><span class="p">():</span>
    <span class="nf">print</span><span class="p">(</span><span class="n">name</span><span class="p">)</span>
    <span class="nf">print</span><span class="p">(</span><span class="nf">sum</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span><span class="o">/</span><span class="nf">len</span><span class="p">(</span><span class="n">scores</span><span class="p">))</span>
</code></pre></div></div> <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>XGBoost
0.8647499999999999
Neural Network
0.76325
</code></pre></div></div> <p>With 200 features but only 15 informative, the neural network has to learn which features are relevant, which is difficult unless regularization (L1/L2, dropout, batch norm) is applied effectively. On the other hand, XGBoost automatically identifies the most relevant features (15 informative features) while ignoring the irrelevant 185 noisy ones.</p> <h3 id="other-things-to-consider-with-nns">Other things to consider with NNs</h3> <p><strong>Interpretability Needs:</strong> In many applications, it is not sufficient to just predict the next label. Often, it is essential to provide the decision maker with the reasoning behind the decision. When using neural networks, it is much harder to interpret and understand this reasoning, while other models, such as decision trees or linear models, offer more transparent and easily interpretable decision-making processes.</p> <p><strong>Initialisation sensitivity:</strong> One of the strengths of neural networks is their non-linearity, which enables them to model complex scenarios. However, this also leads to a non-convex loss function with multiple local minima. As a result, different random weight initializations can cause the network to converge to different local minima, potentially affecting the model’s performance.</p> <p><strong>Many hyperparameters:</strong> Neural networks require tuning a number of hyperparameters, such as the number of hidden neurons, layers, learning rate, and the number of training iterations. Finding the optimal combination of these parameters is crucial for achieving good performance, but it can be time-consuming and computationally expensive.</p> <h3 id="conclusions">Conclusions</h3> <p>While neural networks are powerful, they are not always the best choice. Simpler models can outperform them in terms of accuracy, efficiency, and interpretability, especially with small datasets, tabular data, or when transparency is crucial. Selecting the right model requires a deep understanding of both the data and the problem at hand.</p> <h5 id="acknowledgements"><span style="opacity: 0.4;"><small>Acknowledgements</small></span></h5> <p><span style="opacity: 0.4;"><small>I would like to thank my friend <a href="https://www.linkedin.com/in/aldo-segura/">Aldo Encarnacion</a> and my wife <a href="https://www.linkedin.com/in/jagoda-karpowicz/">Jagoda Hevia Karpowicz</a>, as it was through our discussions that the idea for this blog post was born.</small></span></p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="Machine-Learning"/><category term="Neural-Networks"/><category term="Decision-Trees"/><category term="SVM"/><summary type="html"><![CDATA[While neural networks are powerful, they aren't always the best tool for the job. This post explores cases where simpler models outperform them, with Python code snippets and experiments.]]></summary></entry><entry><title type="html">Seven Years Later: Refactoring the Code Behind My First Peer-Reviewed Paper</title><link href="https://mariohevia.github.io/blog/2025/refactoring-code-behind-first-peer-reviewed-paper/" rel="alternate" type="text/html" title="Seven Years Later: Refactoring the Code Behind My First Peer-Reviewed Paper"/><published>2025-02-01T00:00:00+00:00</published><updated>2025-02-01T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/refactoring-code-behind-first-peer-reviewed-paper</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/refactoring-code-behind-first-peer-reviewed-paper/"><![CDATA[<p>After seven years of programming and learning, I decided to revisit one of my first major Python projects, because I want to reuse it for a new project. Although I had been programming in Python for over a year at the time, I was still relatively new to it and many things can be improved in the codebase. Therefore, my plan is to refactor and modernise the code in order to be able to reporpose it and at the same time improve its runtime using GPUs.</p> <p>In this post, I’ll share what I think I did right, and what steps I took to improve it.</p> <h3 id="what-does-the-original-code-do">What does the original code do?</h3> <p>This project was part of my Master’s Thesis and eventually contributed to my <a href="https://doi.org/10.1145/3321707.3321858">first peer-reviewed publication</a> at <a href="https://gecco-2019.sigevo.org/index.html/HomePage">GECCO 2019</a>, the ACM flagship conference in evolutionary computation. In the project I aimed to compare previously published self-adjusting evolutionary algorithms (EAs) and improve upon them. If you are unfamiliar with self-adjusting EAs, don’t worry, I will explain it in simple terms.</p> <p>EAs are optimisation algorithms that mimic evolution to search for a solution to a problem. They work similar to trial and error: you start with a set of solutions, then randomly modify (mutate) or combine (crossover) them. Next, you update your current set of solutions based on how well they perform, compared to the initial solutions, finally, you repeat the process until you find a good solution. While the idea is simple, there are many different EAs, and each comes with parameters like the number of solutions created every iteration (offspring population) or how much the new solutions are changed (mutation and crossover rate), and the parameter settings can greatly affect their performance.</p> <p>When using an EA, practitioners can either select the parameters at the start of the run (which remain fixed throughout) or let the algorithm adjust them on its own. Self-adjusting EAs fall into the latter category—they automatically choose their parameters without human input. If you’re interested in this topic, you can read more in my <a href="self-adjusting">PhD thesis</a>.</p> <p>That said, the code implements several well-known and some new self-adjusting EAs and compares their optimisation times (calculated by the number of function evaluations) on various optimisation problems.</p> <h3 id="what-i-did-right">What I did right?</h3> <p>I think that, overall, the code is pretty good. It is well written, and I even did documentation for it, which helped this time around.</p> <p>Here are the things I think I did right:</p> <ul> <li>The algorithms and the optimisation problems are implemented as classes with a consistent structure, making them interchangable and allowing new algorithms/problems to be added without changing the main file.</li> <li>The project is relatively well-structured. Here is the file structure: <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">code</span><span class="o">/</span> 
<span class="err">├──</span> <span class="n">master</span><span class="p">.</span><span class="n">py</span>           <span class="c1"># Main script
</span><span class="err">├──</span> <span class="n">utils</span><span class="o">/</span> 
  <span class="err">├──</span> <span class="n">inputs</span><span class="p">.</span><span class="n">py</span>         <span class="c1"># Parsing command-line parameters
</span>  <span class="err">├──</span> <span class="n">leadingones</span><span class="p">.</span><span class="n">py</span>    <span class="c1"># LeadingOnes problem
</span><span class="bp">...</span>
  <span class="err">├──</span> <span class="n">outputs</span><span class="p">.</span><span class="n">py</span>        <span class="c1"># Plots and output logs
</span>  <span class="err">└──</span> <span class="n">sufsamp</span><span class="p">.</span><span class="n">py</span>        <span class="c1"># SufSamp problem
</span></code></pre></div> </div> </li> <li>Each algorithm and problem is contained in its own file, making it easy to maintain.</li> <li>The main file accepts command-line parameters, providing flexibility for running different experiments.</li> <li>All parameters are validated, with explanations and suggested values provided for invalid inputs.</li> <li>Experiments are logged and plotted automatically after completion.</li> </ul> <h3 id="improvements">Improvements</h3> <p>Although the project has a good structure, there are still many things that can be improved or modernised with new libraries. Let’s go through them by parts.</p> <h4 id="code-structure-modularity-and-reusability">Code structure, modularity and reusability</h4> <p>The current implementation uses two “types of classes”, but there is no template class for them to inherit from. Because of this, the code assumes that certain class methods exist and that specific attributes are created and updated inside the algorithm and problem classes without prior checks. It also directly accesses these attributes outside of the class, which is not good practice.</p> <p>Additionally, the algorithms assume that the representations of the problem’s solutions are strings consisting only of ones and zeroes, which limits the possible representations of a problem. This is done because the mutation and crossover used by the algorithms depend on the problem representation, but this should not be set in stone. A better approach is to let the problem class handle the representation of the problems, including how they can be mutated or combined.</p> <p>Let’s write the two parent classes:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Problem</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement evaluate method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_name</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement get_name method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_max_fitness</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement get_max_fitness method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">sample_uar</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement mutate method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">to_string</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement to_string method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_shape</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement to_string method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">mutate</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement mutate method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">crossover</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement crossover method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">multiparent_crossover</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement multiparent_crossover method</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Algorithm</span><span class="p">:</span>
    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">problem</span><span class="p">):</span>
        <span class="n">self</span><span class="p">.</span><span class="n">num_evaluations</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement __next__ method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_num_evaluations</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">num_evaluations</span>

    <span class="k">def</span> <span class="nf">get_best_individual</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement get_best_individual method</span><span class="sh">"</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">get_current_population</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">raise</span> <span class="nc">NotImplementedError</span><span class="p">(</span><span class="sh">"</span><span class="s">Subclass must implement get_best_individual method</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div> <p>Since the current implementation only deals with pseudo-Boolean problems (bitstring representations), I also implemented a new subclass that handles the mutation and crossover for all these problems. This way, the final classes only include the necessary functions, avoiding boilerplate code. As an example, here I show OneMax, which assigns fitness based on the number of one-bits in the bitstring.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">OneMax</span><span class="p">(</span><span class="n">BitstringProblem</span><span class="p">):</span>
    <span class="k">def</span> <span class="nf">evaluate</span><span class="p">(</span><span class="n">self</span><span class="p">,</span> <span class="n">bitstring</span><span class="p">,</span> <span class="n">_</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">sum</span><span class="p">(</span><span class="n">bitstring</span><span class="p">)</span>
    
    <span class="k">def</span> <span class="nf">get_name</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="sh">"</span><span class="s">OneMax</span><span class="sh">"</span>

    <span class="k">def</span> <span class="nf">get_max_fitness</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">self</span><span class="p">.</span><span class="n">n</span>
</code></pre></div></div> <p>Once all the problems were implemented, I returned to the algorithms. However, for this part, we need to consider possible optimisations.</p> <h4 id="parallelisation-and-optimisations">Parallelisation and optimisations</h4> <p>One of the main goals of revisiting this project is to improve the script’s runtime. Since I first considered refactoring the code, I also planned to enable it to run on a GPU using JAX, which should improve the runtime on its own. However, we also need to identify the parts of the code that take the most time during execution to prioritise optimising these areas.</p> <p>To do that I will use the line-by-line profiling library <a href="https://github.com/pyutils/line_profiler">line_profiler</a>. I installed it with:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install </span>line-profiler
</code></pre></div></div> <p>Once installed, I added the decorator <code class="language-python">@profile</code> to the main function in <code>master.py</code> and then run:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kernprof <span class="nt">-l</span> <span class="nt">-v</span> master.py
</code></pre></div></div> <p>This highlighted that, intuitively, the line that takes the most time is <code class="language-python">next(algorithm)</code>. This is where the script iterates the algorithm.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Line</span>    <span class="n">Hits</span>         <span class="n">Time</span>  <span class="n">Per</span> <span class="n">Hit</span>   <span class="o">%</span> <span class="n">Time</span>  <span class="n">Line</span> <span class="n">Contents</span>
<span class="o">==============================================================</span>
<span class="bp">...</span>
<span class="mi">75</span>       <span class="mi">100</span>         <span class="mf">37.3</span>      <span class="mf">0.4</span>      <span class="mf">0.0</span>          <span class="k">if</span> <span class="n">configuration</span><span class="p">.</span><span class="n">stop_criteria</span> <span class="o">==</span> <span class="sh">'</span><span class="s">solved</span><span class="sh">'</span><span class="p">:</span>
<span class="mi">76</span>       <span class="mi">100</span>        <span class="mf">369.3</span>      <span class="mf">3.7</span>      <span class="mf">0.0</span>              <span class="n">m_size</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">pow</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="n">problem_size</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="mi">1000000</span><span class="p">)</span>
<span class="mi">77</span>    <span class="mi">106957</span>      <span class="mf">18801.5</span>      <span class="mf">0.2</span>      <span class="mf">0.2</span>              <span class="k">while</span> <span class="ow">not</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">solved</span><span class="p">:</span>
<span class="mi">78</span>    <span class="mi">106857</span>    <span class="mf">9996295.9</span>     <span class="mf">93.5</span>     <span class="mf">97.1</span>                  <span class="nf">next</span><span class="p">(</span><span class="n">algorithm</span><span class="p">)</span>
<span class="mi">79</span>    <span class="mi">106857</span>      <span class="mf">23680.5</span>      <span class="mf">0.2</span>      <span class="mf">0.2</span>                  <span class="nf">if </span><span class="p">(</span><span class="n">algorithm</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="n">past_fitness</span><span class="p">):</span>
<span class="mi">80</span>    <span class="mi">102403</span>      <span class="mf">14566.7</span>      <span class="mf">0.1</span>      <span class="mf">0.1</span>                      <span class="n">tol</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="mi">81</span>    <span class="mi">102403</span>      <span class="mf">15213.8</span>      <span class="mf">0.1</span>      <span class="mf">0.1</span>                      <span class="n">tol2</span> <span class="o">+=</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">offspring_size</span>
<span class="mi">82</span>                                                           <span class="k">else</span><span class="p">:</span>
<span class="mi">83</span>      <span class="mi">4454</span>        <span class="mf">577.7</span>      <span class="mf">0.1</span>      <span class="mf">0.0</span>                      <span class="n">tol</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">84</span>      <span class="mi">4454</span>        <span class="mf">506.4</span>      <span class="mf">0.1</span>      <span class="mf">0.0</span>                      <span class="n">tol2</span> <span class="o">=</span> <span class="mi">0</span>
<span class="mi">85</span>    <span class="mi">106857</span>      <span class="mf">16685.3</span>      <span class="mf">0.2</span>      <span class="mf">0.2</span>                  <span class="n">past_fitness</span> <span class="o">=</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span>
<span class="mi">86</span>    <span class="mi">106857</span>      <span class="mf">34697.3</span>      <span class="mf">0.3</span>      <span class="mf">0.3</span>                  <span class="nf">if </span><span class="p">(</span><span class="n">algorithm</span><span class="p">.</span><span class="n">evaluations</span> <span class="o">&gt;</span> <span class="n">m_size</span> <span class="ow">or</span> <span class="n">tol2</span> <span class="o">&gt;</span> <span class="mi">1000000</span><span class="p">):</span>
<span class="bp">...</span>
</code></pre></div></div> <p>Although each algorithm performs different tasks, I profiled one of the simplest algorithms to get an idea of which processes take the longest. From the results below, we can see that creating new offspring through mutation and selecting the best offspring take the most time. Therefore, I will focus on these areas when rewriting the code.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Line</span> <span class="c1">#      Hits         Time  Per Hit   % Time  Line Contents
</span><span class="o">==============================================================</span>
<span class="bp">...</span>
<span class="mi">30</span>                                               <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
<span class="mi">31</span>    <span class="mi">108166</span>      <span class="mf">18012.9</span>      <span class="mf">0.2</span>      <span class="mf">0.1</span>          <span class="n">offspring</span> <span class="o">=</span> <span class="p">[]</span>
<span class="mi">32</span>    <span class="mi">216332</span>     <span class="mf">139315.8</span>      <span class="mf">0.6</span>      <span class="mf">0.8</span>          <span class="n">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">bit_string</span><span class="p">),</span> 
<span class="mi">33</span>    <span class="mi">108166</span>      <span class="mf">14133.1</span>      <span class="mf">0.1</span>      <span class="mf">0.1</span>                          <span class="n">self</span><span class="p">.</span><span class="n">bit_string</span><span class="p">]</span>
<span class="mi">34</span>    <span class="mi">108166</span>      <span class="mf">19152.2</span>      <span class="mf">0.2</span>      <span class="mf">0.1</span>          <span class="n">self</span><span class="p">.</span><span class="n">mut_prob_gen</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">mutation_probability</span><span class="p">)</span>
<span class="mi">35</span>    <span class="mi">108166</span>      <span class="mf">16763.9</span>      <span class="mf">0.2</span>      <span class="mf">0.1</span>          <span class="n">self</span><span class="p">.</span><span class="n">lambda_gen</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span><span class="p">)</span>
<span class="mi">36</span>    <span class="mi">216332</span>      <span class="mf">63976.3</span>      <span class="mf">0.3</span>      <span class="mf">0.4</span>          <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span><span class="p">):</span>
<span class="mi">37</span>    <span class="mi">108166</span>   <span class="mf">13799267.8</span>    <span class="mf">127.6</span>     <span class="mf">82.0</span>              <span class="n">mutated_string</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="nf">mutate</span><span class="p">()</span>
<span class="mi">38</span>    <span class="mi">216332</span>     <span class="mf">132957.3</span>      <span class="mf">0.6</span>      <span class="mf">0.8</span>              <span class="n">offspring</span><span class="p">.</span><span class="nf">append</span><span class="p">((</span><span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="nf">evaluate</span><span class="p">(</span><span class="n">mutated_string</span><span class="p">),</span> 
<span class="mi">39</span>    <span class="mi">108166</span>      <span class="mf">13945.3</span>      <span class="mf">0.1</span>      <span class="mf">0.1</span>                                <span class="n">mutated_string</span><span class="p">))</span>
<span class="mi">40</span>    <span class="mi">108166</span>    <span class="mf">2534601.8</span>     <span class="mf">23.4</span>     <span class="mf">15.1</span>          <span class="n">self</span><span class="p">.</span><span class="nf">select</span><span class="p">(</span><span class="n">offspring</span><span class="p">)</span>
<span class="mi">41</span>    <span class="mi">108166</span>      <span class="mf">22606.2</span>      <span class="mf">0.2</span>      <span class="mf">0.1</span>          <span class="n">self</span><span class="p">.</span><span class="n">generations</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="mi">42</span>    <span class="mi">108166</span>      <span class="mf">45919.3</span>      <span class="mf">0.4</span>      <span class="mf">0.3</span>          <span class="n">self</span><span class="p">.</span><span class="n">evaluations</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span>
</code></pre></div></div> <p>The good news from these results is that the tasks taking the most time can be improved through parallelisation. I will now show you how the same function looks in the new code. You’ll notice that I added more comments to make the code more maintainable, and I parallelised the tasks that take the longest.</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="k">def</span> <span class="nf">__next__</span><span class="p">(</span><span class="n">self</span><span class="p">):</span>
        <span class="c1"># Split RNG key for mutation and generate subkeys for each offspring mutation
</span>        <span class="n">self</span><span class="p">.</span><span class="n">rng_key</span><span class="p">,</span> <span class="n">mutate_subkey</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rng_key</span><span class="p">)</span>
        <span class="n">mutate_subkeys</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">mutate_subkey</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span><span class="p">)</span>

        <span class="c1"># Generate offspring by mutating the parent using parallelisation
</span>        <span class="n">vmap_mutation</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="nf">vmap</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="n">mutate</span><span class="p">,</span> <span class="n">in_axes</span><span class="o">=</span><span class="p">(</span><span class="bp">None</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="mi">0</span><span class="p">))</span>
        <span class="n">offspring</span> <span class="o">=</span> <span class="nf">vmap_mutation</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">mutation_probability</span><span class="p">,</span><span class="n">mutate_subkeys</span><span class="p">)</span>

        <span class="c1"># Combine offspring with the original parent for evaluation
</span>        <span class="n">offspring_parent</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">concatenate</span><span class="p">([</span><span class="n">offspring</span><span class="p">,</span><span class="n">self</span><span class="p">.</span><span class="n">parent</span><span class="p">[</span><span class="n">jnp</span><span class="p">.</span><span class="n">newaxis</span><span class="p">,</span> <span class="p">:]],</span> <span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>

        <span class="c1"># Split RNG key for evaluation and generate subkeys for each evaluation
</span>        <span class="n">self</span><span class="p">.</span><span class="n">rng_key</span><span class="p">,</span> <span class="n">eval_subkey</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">rng_key</span><span class="p">)</span>
        <span class="n">eval_subkeys</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="n">random</span><span class="p">.</span><span class="nf">split</span><span class="p">(</span><span class="n">eval_subkey</span><span class="p">,</span> <span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span>

         <span class="c1"># Evaluate fitness of offspring and parent
</span>        <span class="n">vmap_eval</span> <span class="o">=</span> <span class="n">jax</span><span class="p">.</span><span class="nf">vmap</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">problem</span><span class="p">.</span><span class="n">evaluate</span><span class="p">)</span>
        <span class="n">fitnesses</span> <span class="o">=</span> <span class="nf">vmap_eval</span><span class="p">(</span><span class="n">offspring_parent</span><span class="p">,</span><span class="n">eval_subkeys</span><span class="p">)</span>

        <span class="c1"># Identify the index of the best fitness
</span>        <span class="n">best_index</span> <span class="o">=</span> <span class="n">jnp</span><span class="p">.</span><span class="nf">argmax</span><span class="p">(</span><span class="n">fitnesses</span><span class="p">)</span>

        <span class="c1"># Update the parent, best fitness and number of evaluations used
</span>        <span class="n">self</span><span class="p">.</span><span class="n">parent</span> <span class="o">=</span> <span class="n">offspring_parent</span><span class="p">[</span><span class="n">best_index</span><span class="p">]</span>
        <span class="n">self</span><span class="p">.</span><span class="n">num_evaluations</span> <span class="o">+=</span> <span class="n">self</span><span class="p">.</span><span class="n">offspring_size</span>
        <span class="n">self</span><span class="p">.</span><span class="n">best_fitness</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="n">self</span><span class="p">.</span><span class="n">best_fitness</span><span class="p">,</span> <span class="n">fitnesses</span><span class="p">[</span><span class="n">best_index</span><span class="p">])</span>
</code></pre></div></div> <h3 id="is-the-codes-behavior-preserved">Is the code’s behavior preserved?</h3> <p>Before we start comparing the runtime of both implementations, we need to ensure that the behaviour of the code remains consistent. Since the algorithms are random, the new implementation uses different libraries (with distinct random generators), and I have rewritten several parts of the code, we can’t expect the exact same results, even with the same random seeds. However, we can still test whether the results are consistent on average by running multiple tests.</p> <p>Testing with the same algorithm I showed earlier on OneMax for 100 runs with both implementations, I obtained an average of 125,610 function evaluations with the old code and 125,225 function evaluations with the new one. This suggests that the two are likely to have the same behavior and we can continue to comparing their runtime.</p> <h3 id="runtime-comparisons">Runtime comparisons</h3> <p>The final part is to compare the runtime of the new implementation versus the old one. For these tests, I used the same algorithm-problem pair as before, and we can clearly see a stark difference in performance. One finishes in just over one and a half minutes, while the other takes more than an hour!</p> <p>Here are the results (I’ve removed most of the lines that didn’t take too much time):</p> <h5 id="new-implementation">New implementation</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Total</span> <span class="n">time</span><span class="p">:</span> <span class="mf">101.373</span> <span class="n">s</span>

<span class="n">Line</span> <span class="c1">#      Hits         Time  Per Hit   % Time  Line Contents
</span><span class="o">==============================================================</span>
<span class="bp">...</span>
    <span class="mi">37</span>       <span class="mi">100</span>         <span class="mf">35.3</span>      <span class="mf">0.4</span>      <span class="mf">0.0</span>              <span class="n">case</span> <span class="sh">"</span><span class="s">solved</span><span class="sh">"</span><span class="p">:</span>
    <span class="mi">38</span>     <span class="mi">25145</span>    <span class="mf">2513597.3</span>    <span class="mf">100.0</span>      <span class="mf">2.5</span>                  <span class="k">while</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">best_fitness</span><span class="o">&lt;</span><span class="n">problem</span><span class="p">.</span><span class="nf">get_max_fitness</span><span class="p">():</span>
    <span class="mi">39</span>     <span class="mi">25045</span>   <span class="mf">97746846.7</span>   <span class="mf">3902.8</span>     <span class="mf">96.4</span>                      <span class="nf">next</span><span class="p">(</span><span class="n">algorithm</span><span class="p">)</span>
<span class="bp">...</span>
</code></pre></div></div> <h5 id="old-implementation">Old implementation</h5> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Total</span> <span class="n">time</span><span class="p">:</span> <span class="mf">5409.95</span> <span class="n">s</span>

<span class="n">Line</span> <span class="c1">#      Hits         Time  Per Hit   % Time  Line Contents
</span><span class="o">==============================================================</span>
<span class="bp">...</span>
    <span class="mi">76</span>       <span class="mi">100</span>        <span class="mf">376.7</span>      <span class="mf">3.8</span>      <span class="mf">0.0</span>              <span class="n">m_size</span> <span class="o">=</span> <span class="nf">max</span><span class="p">(</span><span class="mi">100</span> <span class="o">*</span> <span class="n">math</span><span class="p">.</span><span class="nf">pow</span><span class="p">(</span><span class="n">configuration</span><span class="p">.</span><span class="n">problem_size</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span> <span class="mi">1000000</span><span class="p">)</span>
    <span class="mi">77</span>     <span class="mi">25222</span>       <span class="mf">6507.4</span>      <span class="mf">0.3</span>      <span class="mf">0.0</span>              <span class="k">while</span> <span class="ow">not</span> <span class="n">algorithm</span><span class="p">.</span><span class="n">solved</span><span class="p">:</span>
    <span class="mi">78</span>     <span class="mi">25122</span> <span class="mf">5409583277.1</span> <span class="mf">215332.5</span>    <span class="mf">100.0</span>                  <span class="nf">next</span><span class="p">(</span><span class="n">algorithm</span><span class="p">)</span>
<span class="bp">...</span>
</code></pre></div></div> <h3 id="conclusion">Conclusion</h3> <p>The first thing I want to say is that it was so much fun to return to one of my first projects and realise how much I’ve learnt over the last 7 years. The results show that the new implementation not only preserves the behaviour of the original code but also runs much faster, making it more efficient for larger experiments. Now, I can move on to my next project, which will use this new implementation as a base.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="Jax"/><category term="Evolutionary-Computation"/><category term="GPU"/><summary type="html"><![CDATA[I revisit the code from my first peer-reviewed paper (and master's thesis), published seven years ago, to modernize it with the skills and knowledge I’ve gained since, improving its performance, readability, and maintainability.]]></summary></entry><entry><title type="html">Testing the new JaxMARL library</title><link href="https://mariohevia.github.io/blog/2025/jaxmarl/" rel="alternate" type="text/html" title="Testing the new JaxMARL library"/><published>2025-01-15T00:00:00+00:00</published><updated>2025-01-15T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2025/jaxmarl</id><content type="html" xml:base="https://mariohevia.github.io/blog/2025/jaxmarl/"><![CDATA[<h1 id="introduction">Introduction</h1> <p>In this blog post, I’ll share my experience getting started with JaxMARL, a new library presented in <a href="https://neurips.cc/virtual/2024/poster/97649">NeurIPS 2024</a>. It is designed for multi-agent reinforcement learning using JAX. JaxMARL promises ‘ease-of-use with GPU-enabled efficiency’ with support of a wide range of commonly used MARL environments like Multi-Agent Particle Environment (MPE) and some baseline algorithms.</p> <p>I’ll walk you through how I installed JaxMARL, dealt with some installation hiccups, and got everything running smoothly. By the end, I’ll check one of the baseline algorithms from the library to familiarise myself with it and see how it performs.</p> <h1 id="installation">Installation</h1> <p>The easiest way to install a new Python library is often to create a fresh environment and use Python’s package manager, <code>pip</code>. So naturally, the first thing I did was run <code>pip install jaxmarl</code>.</p> <p>Everything seemed to install smoothly. But when I tried <code class="language-python">import jaxmarl</code> I got the following error:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AttributeError: <span class="s1">'Config'</span> object has no attribute <span class="s1">'define_bool_state'</span>
</code></pre></div></div> <p>This turned out to be a version mismatch between <code>jax</code>, <code>flax</code>, and <code>jaxMARL</code>. Despite my best efforts to manually match the library versions, I couldn’t get it to work. After checking the <a href="https://github.com/FLAIROx/JaxMARL/issues">Github issues page</a>, I realized I wasn’t alone; others had faced the same issue. The suggested fix? Use the Dockerfile provided in the repository.</p> <p>Following the <a href="https://github.com/FLAIROx/JaxMARL?tab=readme-ov-file#install">JaxMARL installation guide</a>, I cloned the repository and set up the Docker container with these commands:</p> <div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:FLAIROx/JaxMARL.git
<span class="nb">cd </span>JaxMARL
make build
make run
</code></pre></div></div> <p>Once everything was set up, it was time to test if everything was working as expected. Since I’m interested in using MPE environments, I ran the script <code>mpe_introduction.py</code> from <code style="white-space: nowrap;">/jaxmarl/tutorials</code>.</p> <p>This script runs the <code>'MPE_simple_reference_v3'</code> environment from the MPE suite, randomly selecting actions for each player. In order to save the resulting animation as a GIF, I updated the last part of the script like this:</p> <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Original line:
# viz.animate(view=True)
</span>
<span class="c1"># Modified code to save the animation
</span><span class="kn">import</span> <span class="n">matplotlib.animation</span> <span class="k">as</span> <span class="n">animation</span>
<span class="kn">import</span> <span class="n">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">ani</span> <span class="o">=</span> <span class="n">animation</span><span class="p">.</span><span class="nc">FuncAnimation</span><span class="p">(</span>
    <span class="n">viz</span><span class="p">.</span><span class="n">fig</span><span class="p">,</span>
    <span class="n">viz</span><span class="p">.</span><span class="n">update</span><span class="p">,</span>
    <span class="n">frames</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">viz</span><span class="p">.</span><span class="n">state_seq</span><span class="p">),</span>
    <span class="n">blit</span> <span class="o">=</span> <span class="bp">False</span><span class="p">,</span>
    <span class="n">interval</span> <span class="o">=</span> <span class="n">viz</span><span class="p">.</span><span class="n">interval</span><span class="p">,</span>
<span class="p">)</span>
<span class="n">ani</span><span class="p">.</span><span class="nf">save</span><span class="p">(</span><span class="sh">'</span><span class="s">animation.gif</span><span class="sh">'</span><span class="p">,</span> <span class="n">writer</span><span class="o">=</span><span class="sh">'</span><span class="s">pillow</span><span class="sh">'</span><span class="p">,</span> <span class="n">fps</span><span class="o">=</span><span class="mi">30</span><span class="p">)</span>
</code></pre></div></div> <p>And here’s the resulting animation, confirming that everything is working as intended:</p> <p style="text-align:center"><img src="../../../assets/img/blog_images/animation.gif" alt="First run of MPE using JaxMARL"/></p> <h1 id="running-a-baseline-algorithm">Running a Baseline Algorithm</h1> <p>The library offers some baseline algorithms already implemented on several of its environments. Again, since I am particularly interested in the environments from MPE, I tried Independent Proximal Policy Optimisation (IPPO) on the <a href="https://pettingzoo.farama.org/environments/mpe/simple_reference">simple reference environment from MPE</a>. The implementation provided by JaxMARL is pretty fast, and when run, it generates a nice plot of the average returns of the players after each game, demonstrating that the algorithm is learning.</p> <p><img src="../../../assets/img/blog_images/ippo_ff_MPE_simple_spread_v3.png" alt="Training of IPPO on Simple Reference"/></p> <p>However, I didn’t want to just see a plot; I wanted to observe how the algorithm’s behaviour evolved throughout the training. To achieve this, I needed to extract the information of the games played by the algorithm, which turned out to be no easy feat. The first thing to understand is that implementation uses <code class="language-python">jax.vmap</code> to parallelise several environements and random seeds, and <code class="language-python">jax.lax.scan</code> to efficiently loop through each game played and iteration of the algorithm. These functions can return data collected during the runs, but the data is returned in a stacked form. Therefore, I not only had to extract the environment states but also unstack after the training was finished.</p> <p>After doing all this, I encountered some small bugs that I initially thought were my own fault. After some debugging, I realised that I haven’t introduced any bug-the bugs were there all along! So, I reported them to the <a href="https://github.com/FLAIROx/JaxMARL/issues">Github issues page</a> of JaxMARL. While I don’t think the bugs significantly impacted the algorithm’s training, they did interfere with the visualisations I wanted to create. After dealing with these bugs, I was able to create a visualisation of both the first game played during training and the last one.</p> <h3 style="text-align:center" id="run-before-training">Run before training</h3> <p style="text-align:center"><img src="../../../assets/img/blog_images/animation_start.gif" alt="Run before training"/></p> <h3 style="text-align:center" id="run-after-training">Run after training</h3> <p style="text-align:center"><img src="../../../assets/img/blog_images/animation_final.gif" alt="Run after training"/></p> <p>We can see that the algorithm has indeed learnt something, but it is still far from perfect. The aim of the game is for the agents (green) to learn to cover all the landmarks (black) while avoiding collisions. In this case, one of the agents runs away, while the others attempt to cover (stay as close as possible to) the three landmarks on their own.</p> <h1 id="conclusions">Conclusions</h1> <p>After using and familiarising myself with JaxMARL, I believe it holds significant promise, although it still feels somewhat rough in the edges. The library’s ease of use and GPU-enabled efficiency are notable strengths, but there is room for further refinement. Despite these limitations, I plan to incorporate JaxMARL into a future project involving coevolutionary algorithms, which I’ll be showcasing on this blog. I hope to see the library evolve further in the coming updates and I will keep reporting any pesky bugs that I encounter.</p>]]></content><author><name>Mario A. Hevia Fajardo</name></author><category term="Python"/><category term="JaxMARL"/><category term="MARL"/><category term="GPU"/><category term="Jax"/><summary type="html"><![CDATA[Testing JaxMARL, a cutting-edge library for multi-agent reinforcement learning, built on the high-performance JAX framework for efficient parallel computation.]]></summary></entry><entry><title type="html">Ranking Diversity Benefits CoEAs on an Intransitive Game</title><link href="https://mariohevia.github.io/blog/2024/rankdivcoea/" rel="alternate" type="text/html" title="Ranking Diversity Benefits CoEAs on an Intransitive Game"/><published>2024-09-09T00:00:00+00:00</published><updated>2024-09-09T00:00:00+00:00</updated><id>https://mariohevia.github.io/blog/2024/rankdivcoea</id><content type="html" xml:base="https://mariohevia.github.io/blog/2024/rankdivcoea/"><![CDATA[<h2 id="bilinear">Bilinear</h2> <p><a href="/assets/plotly/pdcoea_animation.html" target="Bilinear"> <button class="styled-button">PDCoEA</button> </a> <a href="/assets/plotly/rankdivcoea_animation.html" target="Bilinear"> <button class="styled-button">RankDiv CoEA</button> </a> <a href="/assets/plotly/onecommalambdaavg.html" target="Bilinear"> <button class="styled-button">(1,λ) CoEA with average fitness aggregation</button> </a> <a href="/assets/plotly/onecommalambdaworst.html" target="Bilinear"> <button class="styled-button">(1,λ) CoEA with worst case fitness aggregation</button> </a> <a href="/assets/plotly/rlspd.html" target="Bilinear"> <button class="styled-button">(1+1) RLS-PDCoEA</button> </a></p> <div class="l-page" style="display: flex; justify-content: center; align-items: center;"> <iframe name="Bilinear" src="about:blank" frameborder="0" scrolling="no" height="550px" width="70%" style="border: 1px dashed grey;"></iframe> </div> ]]></content><author><name>Mario A. Hevia Fajardo</name></author><summary type="html"><![CDATA[Introducing ranking diversity for competitive coevolutionary algorithms]]></summary></entry></feed>